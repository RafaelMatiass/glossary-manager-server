
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Glossary
 * 
 */
export type Glossary = $Result.DefaultSelection<Prisma.$GlossaryPayload>
/**
 * Model Discipline
 * 
 */
export type Discipline = $Result.DefaultSelection<Prisma.$DisciplinePayload>
/**
 * Model Term
 * 
 */
export type Term = $Result.DefaultSelection<Prisma.$TermPayload>
/**
 * Model Definition
 * 
 */
export type Definition = $Result.DefaultSelection<Prisma.$DefinitionPayload>
/**
 * Model Translation
 * 
 */
export type Translation = $Result.DefaultSelection<Prisma.$TranslationPayload>
/**
 * Model Source
 * 
 */
export type Source = $Result.DefaultSelection<Prisma.$SourcePayload>
/**
 * Model Author
 * 
 */
export type Author = $Result.DefaultSelection<Prisma.$AuthorPayload>
/**
 * Model Term_Discipline_Definition
 * 
 */
export type Term_Discipline_Definition = $Result.DefaultSelection<Prisma.$Term_Discipline_DefinitionPayload>
/**
 * Model Source_Authorship
 * 
 */
export type Source_Authorship = $Result.DefaultSelection<Prisma.$Source_AuthorshipPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;

  /**
   * `prisma.glossary`: Exposes CRUD operations for the **Glossary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Glossaries
    * const glossaries = await prisma.glossary.findMany()
    * ```
    */
  get glossary(): Prisma.GlossaryDelegate<ExtArgs>;

  /**
   * `prisma.discipline`: Exposes CRUD operations for the **Discipline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplines
    * const disciplines = await prisma.discipline.findMany()
    * ```
    */
  get discipline(): Prisma.DisciplineDelegate<ExtArgs>;

  /**
   * `prisma.term`: Exposes CRUD operations for the **Term** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terms
    * const terms = await prisma.term.findMany()
    * ```
    */
  get term(): Prisma.TermDelegate<ExtArgs>;

  /**
   * `prisma.definition`: Exposes CRUD operations for the **Definition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Definitions
    * const definitions = await prisma.definition.findMany()
    * ```
    */
  get definition(): Prisma.DefinitionDelegate<ExtArgs>;

  /**
   * `prisma.translation`: Exposes CRUD operations for the **Translation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Translations
    * const translations = await prisma.translation.findMany()
    * ```
    */
  get translation(): Prisma.TranslationDelegate<ExtArgs>;

  /**
   * `prisma.source`: Exposes CRUD operations for the **Source** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sources
    * const sources = await prisma.source.findMany()
    * ```
    */
  get source(): Prisma.SourceDelegate<ExtArgs>;

  /**
   * `prisma.author`: Exposes CRUD operations for the **Author** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.author.findMany()
    * ```
    */
  get author(): Prisma.AuthorDelegate<ExtArgs>;

  /**
   * `prisma.term_Discipline_Definition`: Exposes CRUD operations for the **Term_Discipline_Definition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Term_Discipline_Definitions
    * const term_Discipline_Definitions = await prisma.term_Discipline_Definition.findMany()
    * ```
    */
  get term_Discipline_Definition(): Prisma.Term_Discipline_DefinitionDelegate<ExtArgs>;

  /**
   * `prisma.source_Authorship`: Exposes CRUD operations for the **Source_Authorship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Source_Authorships
    * const source_Authorships = await prisma.source_Authorship.findMany()
    * ```
    */
  get source_Authorship(): Prisma.Source_AuthorshipDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.1
   * Query Engine version: 6a3747c37ff169c90047725a05a6ef02e32ac97e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Course: 'Course',
    Glossary: 'Glossary',
    Discipline: 'Discipline',
    Term: 'Term',
    Definition: 'Definition',
    Translation: 'Translation',
    Source: 'Source',
    Author: 'Author',
    Term_Discipline_Definition: 'Term_Discipline_Definition',
    Source_Authorship: 'Source_Authorship'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'course' | 'glossary' | 'discipline' | 'term' | 'definition' | 'translation' | 'source' | 'author' | 'term_Discipline_Definition' | 'source_Authorship'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Glossary: {
        payload: Prisma.$GlossaryPayload<ExtArgs>
        fields: Prisma.GlossaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlossaryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlossaryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload>
          }
          findFirst: {
            args: Prisma.GlossaryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlossaryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload>
          }
          findMany: {
            args: Prisma.GlossaryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload>[]
          }
          create: {
            args: Prisma.GlossaryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload>
          }
          delete: {
            args: Prisma.GlossaryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload>
          }
          update: {
            args: Prisma.GlossaryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload>
          }
          deleteMany: {
            args: Prisma.GlossaryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GlossaryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GlossaryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossaryPayload>
          }
          aggregate: {
            args: Prisma.GlossaryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGlossary>
          }
          groupBy: {
            args: Prisma.GlossaryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GlossaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlossaryCountArgs<ExtArgs>,
            result: $Utils.Optional<GlossaryCountAggregateOutputType> | number
          }
        }
      }
      Discipline: {
        payload: Prisma.$DisciplinePayload<ExtArgs>
        fields: Prisma.DisciplineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisciplineFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisciplineFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          findFirst: {
            args: Prisma.DisciplineFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisciplineFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          findMany: {
            args: Prisma.DisciplineFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>[]
          }
          create: {
            args: Prisma.DisciplineCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          delete: {
            args: Prisma.DisciplineDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          update: {
            args: Prisma.DisciplineUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          deleteMany: {
            args: Prisma.DisciplineDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DisciplineUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DisciplineUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          aggregate: {
            args: Prisma.DisciplineAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDiscipline>
          }
          groupBy: {
            args: Prisma.DisciplineGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DisciplineGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisciplineCountArgs<ExtArgs>,
            result: $Utils.Optional<DisciplineCountAggregateOutputType> | number
          }
        }
      }
      Term: {
        payload: Prisma.$TermPayload<ExtArgs>
        fields: Prisma.TermFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TermFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TermFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          findFirst: {
            args: Prisma.TermFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TermFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          findMany: {
            args: Prisma.TermFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload>[]
          }
          create: {
            args: Prisma.TermCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          delete: {
            args: Prisma.TermDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          update: {
            args: Prisma.TermUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          deleteMany: {
            args: Prisma.TermDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TermUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TermUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          aggregate: {
            args: Prisma.TermAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTerm>
          }
          groupBy: {
            args: Prisma.TermGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TermGroupByOutputType>[]
          }
          count: {
            args: Prisma.TermCountArgs<ExtArgs>,
            result: $Utils.Optional<TermCountAggregateOutputType> | number
          }
        }
      }
      Definition: {
        payload: Prisma.$DefinitionPayload<ExtArgs>
        fields: Prisma.DefinitionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DefinitionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DefinitionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload>
          }
          findFirst: {
            args: Prisma.DefinitionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DefinitionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload>
          }
          findMany: {
            args: Prisma.DefinitionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload>[]
          }
          create: {
            args: Prisma.DefinitionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload>
          }
          delete: {
            args: Prisma.DefinitionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload>
          }
          update: {
            args: Prisma.DefinitionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload>
          }
          deleteMany: {
            args: Prisma.DefinitionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DefinitionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DefinitionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DefinitionPayload>
          }
          aggregate: {
            args: Prisma.DefinitionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDefinition>
          }
          groupBy: {
            args: Prisma.DefinitionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DefinitionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DefinitionCountArgs<ExtArgs>,
            result: $Utils.Optional<DefinitionCountAggregateOutputType> | number
          }
        }
      }
      Translation: {
        payload: Prisma.$TranslationPayload<ExtArgs>
        fields: Prisma.TranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TranslationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TranslationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload>
          }
          findFirst: {
            args: Prisma.TranslationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TranslationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload>
          }
          findMany: {
            args: Prisma.TranslationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload>[]
          }
          create: {
            args: Prisma.TranslationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload>
          }
          delete: {
            args: Prisma.TranslationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload>
          }
          update: {
            args: Prisma.TranslationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload>
          }
          deleteMany: {
            args: Prisma.TranslationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TranslationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TranslationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TranslationPayload>
          }
          aggregate: {
            args: Prisma.TranslationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTranslation>
          }
          groupBy: {
            args: Prisma.TranslationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TranslationCountArgs<ExtArgs>,
            result: $Utils.Optional<TranslationCountAggregateOutputType> | number
          }
        }
      }
      Source: {
        payload: Prisma.$SourcePayload<ExtArgs>
        fields: Prisma.SourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SourceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SourceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload>
          }
          findFirst: {
            args: Prisma.SourceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SourceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload>
          }
          findMany: {
            args: Prisma.SourceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload>[]
          }
          create: {
            args: Prisma.SourceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload>
          }
          delete: {
            args: Prisma.SourceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload>
          }
          update: {
            args: Prisma.SourceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload>
          }
          deleteMany: {
            args: Prisma.SourceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SourceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SourceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourcePayload>
          }
          aggregate: {
            args: Prisma.SourceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSource>
          }
          groupBy: {
            args: Prisma.SourceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.SourceCountArgs<ExtArgs>,
            result: $Utils.Optional<SourceCountAggregateOutputType> | number
          }
        }
      }
      Author: {
        payload: Prisma.$AuthorPayload<ExtArgs>
        fields: Prisma.AuthorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          findFirst: {
            args: Prisma.AuthorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          findMany: {
            args: Prisma.AuthorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>[]
          }
          create: {
            args: Prisma.AuthorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          delete: {
            args: Prisma.AuthorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          update: {
            args: Prisma.AuthorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          deleteMany: {
            args: Prisma.AuthorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuthorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuthorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          aggregate: {
            args: Prisma.AuthorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuthor>
          }
          groupBy: {
            args: Prisma.AuthorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuthorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthorCountArgs<ExtArgs>,
            result: $Utils.Optional<AuthorCountAggregateOutputType> | number
          }
        }
      }
      Term_Discipline_Definition: {
        payload: Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>
        fields: Prisma.Term_Discipline_DefinitionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Term_Discipline_DefinitionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Term_Discipline_DefinitionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload>
          }
          findFirst: {
            args: Prisma.Term_Discipline_DefinitionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Term_Discipline_DefinitionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload>
          }
          findMany: {
            args: Prisma.Term_Discipline_DefinitionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload>[]
          }
          create: {
            args: Prisma.Term_Discipline_DefinitionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload>
          }
          delete: {
            args: Prisma.Term_Discipline_DefinitionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload>
          }
          update: {
            args: Prisma.Term_Discipline_DefinitionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload>
          }
          deleteMany: {
            args: Prisma.Term_Discipline_DefinitionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Term_Discipline_DefinitionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Term_Discipline_DefinitionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Term_Discipline_DefinitionPayload>
          }
          aggregate: {
            args: Prisma.Term_Discipline_DefinitionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTerm_Discipline_Definition>
          }
          groupBy: {
            args: Prisma.Term_Discipline_DefinitionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Term_Discipline_DefinitionGroupByOutputType>[]
          }
          count: {
            args: Prisma.Term_Discipline_DefinitionCountArgs<ExtArgs>,
            result: $Utils.Optional<Term_Discipline_DefinitionCountAggregateOutputType> | number
          }
        }
      }
      Source_Authorship: {
        payload: Prisma.$Source_AuthorshipPayload<ExtArgs>
        fields: Prisma.Source_AuthorshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Source_AuthorshipFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Source_AuthorshipFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload>
          }
          findFirst: {
            args: Prisma.Source_AuthorshipFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Source_AuthorshipFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload>
          }
          findMany: {
            args: Prisma.Source_AuthorshipFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload>[]
          }
          create: {
            args: Prisma.Source_AuthorshipCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload>
          }
          delete: {
            args: Prisma.Source_AuthorshipDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload>
          }
          update: {
            args: Prisma.Source_AuthorshipUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload>
          }
          deleteMany: {
            args: Prisma.Source_AuthorshipDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Source_AuthorshipUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Source_AuthorshipUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Source_AuthorshipPayload>
          }
          aggregate: {
            args: Prisma.Source_AuthorshipAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSource_Authorship>
          }
          groupBy: {
            args: Prisma.Source_AuthorshipGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Source_AuthorshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.Source_AuthorshipCountArgs<ExtArgs>,
            result: $Utils.Optional<Source_AuthorshipCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    glossary: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    glossary?: boolean | CourseCountOutputTypeCountGlossaryArgs
  }

  // Custom InputTypes

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountGlossaryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GlossaryWhereInput
  }



  /**
   * Count Type GlossaryCountOutputType
   */

  export type GlossaryCountOutputType = {
    Discipline: number
  }

  export type GlossaryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Discipline?: boolean | GlossaryCountOutputTypeCountDisciplineArgs
  }

  // Custom InputTypes

  /**
   * GlossaryCountOutputType without action
   */
  export type GlossaryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCountOutputType
     */
    select?: GlossaryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GlossaryCountOutputType without action
   */
  export type GlossaryCountOutputTypeCountDisciplineArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DisciplineWhereInput
  }



  /**
   * Count Type DisciplineCountOutputType
   */

  export type DisciplineCountOutputType = {
    Term_Discipline_Definition: number
  }

  export type DisciplineCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Term_Discipline_Definition?: boolean | DisciplineCountOutputTypeCountTerm_Discipline_DefinitionArgs
  }

  // Custom InputTypes

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplineCountOutputType
     */
    select?: DisciplineCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeCountTerm_Discipline_DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Term_Discipline_DefinitionWhereInput
  }



  /**
   * Count Type TermCountOutputType
   */

  export type TermCountOutputType = {
    Term_Discipline_Definition: number
    Translation: number
  }

  export type TermCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Term_Discipline_Definition?: boolean | TermCountOutputTypeCountTerm_Discipline_DefinitionArgs
    Translation?: boolean | TermCountOutputTypeCountTranslationArgs
  }

  // Custom InputTypes

  /**
   * TermCountOutputType without action
   */
  export type TermCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermCountOutputType
     */
    select?: TermCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TermCountOutputType without action
   */
  export type TermCountOutputTypeCountTerm_Discipline_DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Term_Discipline_DefinitionWhereInput
  }


  /**
   * TermCountOutputType without action
   */
  export type TermCountOutputTypeCountTranslationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TranslationWhereInput
  }



  /**
   * Count Type DefinitionCountOutputType
   */

  export type DefinitionCountOutputType = {
    Term_Discipline_Definition: number
  }

  export type DefinitionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Term_Discipline_Definition?: boolean | DefinitionCountOutputTypeCountTerm_Discipline_DefinitionArgs
  }

  // Custom InputTypes

  /**
   * DefinitionCountOutputType without action
   */
  export type DefinitionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefinitionCountOutputType
     */
    select?: DefinitionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DefinitionCountOutputType without action
   */
  export type DefinitionCountOutputTypeCountTerm_Discipline_DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Term_Discipline_DefinitionWhereInput
  }



  /**
   * Count Type SourceCountOutputType
   */

  export type SourceCountOutputType = {
    Source_Authorship: number
    Translation: number
    Definition: number
  }

  export type SourceCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Source_Authorship?: boolean | SourceCountOutputTypeCountSource_AuthorshipArgs
    Translation?: boolean | SourceCountOutputTypeCountTranslationArgs
    Definition?: boolean | SourceCountOutputTypeCountDefinitionArgs
  }

  // Custom InputTypes

  /**
   * SourceCountOutputType without action
   */
  export type SourceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceCountOutputType
     */
    select?: SourceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SourceCountOutputType without action
   */
  export type SourceCountOutputTypeCountSource_AuthorshipArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Source_AuthorshipWhereInput
  }


  /**
   * SourceCountOutputType without action
   */
  export type SourceCountOutputTypeCountTranslationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TranslationWhereInput
  }


  /**
   * SourceCountOutputType without action
   */
  export type SourceCountOutputTypeCountDefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DefinitionWhereInput
  }



  /**
   * Count Type AuthorCountOutputType
   */

  export type AuthorCountOutputType = {
    Source_Authorship: number
  }

  export type AuthorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Source_Authorship?: boolean | AuthorCountOutputTypeCountSource_AuthorshipArgs
  }

  // Custom InputTypes

  /**
   * AuthorCountOutputType without action
   */
  export type AuthorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorCountOutputType
     */
    select?: AuthorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AuthorCountOutputType without action
   */
  export type AuthorCountOutputTypeCountSource_AuthorshipArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Source_AuthorshipWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    prontuario: string | null
    name: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    prontuario: string | null
    name: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    prontuario: number
    name: number
    password: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    prontuario?: true
    name?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    prontuario?: true
    name?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    prontuario?: true
    name?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    prontuario: string
    name: string
    password: string
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    prontuario?: boolean
    name?: boolean
    password?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    prontuario?: boolean
    name?: boolean
    password?: boolean
  }


  export type $UsersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {}
    scalars: $Extensions.GetResult<{
      prontuario: string
      name: string
      password: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `prontuario`
     * const usersWithProntuarioOnly = await prisma.users.findMany({ select: { prontuario: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly prontuario: FieldRef<"Users", 'String'>
    readonly name: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
  }



  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type CourseMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    name: string
    description: string | null
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    glossary?: boolean | Course$glossaryArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    glossary?: boolean | Course$glossaryArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CoursePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      glossary: Prisma.$GlossaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      description: string | null
    }, ExtArgs["result"]["course"]>
    composites: {}
  }


  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseCreateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    glossary<T extends Course$glossaryArgs<ExtArgs> = {}>(args?: Subset<T, Course$glossaryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly name: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }


  /**
   * Course.glossary
   */
  export type Course$glossaryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    where?: GlossaryWhereInput
    orderBy?: GlossaryOrderByWithRelationInput | GlossaryOrderByWithRelationInput[]
    cursor?: GlossaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GlossaryScalarFieldEnum | GlossaryScalarFieldEnum[]
  }


  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
  }



  /**
   * Model Glossary
   */

  export type AggregateGlossary = {
    _count: GlossaryCountAggregateOutputType | null
    _min: GlossaryMinAggregateOutputType | null
    _max: GlossaryMaxAggregateOutputType | null
  }

  export type GlossaryMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    name: string | null
    description: string | null
  }

  export type GlossaryMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    name: string | null
    description: string | null
  }

  export type GlossaryCountAggregateOutputType = {
    id: number
    courseId: number
    name: number
    description: number
    _all: number
  }


  export type GlossaryMinAggregateInputType = {
    id?: true
    courseId?: true
    name?: true
    description?: true
  }

  export type GlossaryMaxAggregateInputType = {
    id?: true
    courseId?: true
    name?: true
    description?: true
  }

  export type GlossaryCountAggregateInputType = {
    id?: true
    courseId?: true
    name?: true
    description?: true
    _all?: true
  }

  export type GlossaryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Glossary to aggregate.
     */
    where?: GlossaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Glossaries to fetch.
     */
    orderBy?: GlossaryOrderByWithRelationInput | GlossaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlossaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Glossaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Glossaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Glossaries
    **/
    _count?: true | GlossaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlossaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlossaryMaxAggregateInputType
  }

  export type GetGlossaryAggregateType<T extends GlossaryAggregateArgs> = {
        [P in keyof T & keyof AggregateGlossary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlossary[P]>
      : GetScalarType<T[P], AggregateGlossary[P]>
  }




  export type GlossaryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GlossaryWhereInput
    orderBy?: GlossaryOrderByWithAggregationInput | GlossaryOrderByWithAggregationInput[]
    by: GlossaryScalarFieldEnum[] | GlossaryScalarFieldEnum
    having?: GlossaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlossaryCountAggregateInputType | true
    _min?: GlossaryMinAggregateInputType
    _max?: GlossaryMaxAggregateInputType
  }

  export type GlossaryGroupByOutputType = {
    id: string
    courseId: string
    name: string
    description: string | null
    _count: GlossaryCountAggregateOutputType | null
    _min: GlossaryMinAggregateOutputType | null
    _max: GlossaryMaxAggregateOutputType | null
  }

  type GetGlossaryGroupByPayload<T extends GlossaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlossaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlossaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlossaryGroupByOutputType[P]>
            : GetScalarType<T[P], GlossaryGroupByOutputType[P]>
        }
      >
    >


  export type GlossarySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    name?: boolean
    description?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    Discipline?: boolean | Glossary$DisciplineArgs<ExtArgs>
    _count?: boolean | GlossaryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["glossary"]>

  export type GlossarySelectScalar = {
    id?: boolean
    courseId?: boolean
    name?: boolean
    description?: boolean
  }

  export type GlossaryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    Discipline?: boolean | Glossary$DisciplineArgs<ExtArgs>
    _count?: boolean | GlossaryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GlossaryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Glossary"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      Discipline: Prisma.$DisciplinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      courseId: string
      name: string
      description: string | null
    }, ExtArgs["result"]["glossary"]>
    composites: {}
  }


  type GlossaryGetPayload<S extends boolean | null | undefined | GlossaryDefaultArgs> = $Result.GetResult<Prisma.$GlossaryPayload, S>

  type GlossaryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GlossaryFindManyArgs, 'select' | 'include'> & {
      select?: GlossaryCountAggregateInputType | true
    }

  export interface GlossaryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Glossary'], meta: { name: 'Glossary' } }
    /**
     * Find zero or one Glossary that matches the filter.
     * @param {GlossaryFindUniqueArgs} args - Arguments to find a Glossary
     * @example
     * // Get one Glossary
     * const glossary = await prisma.glossary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GlossaryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GlossaryFindUniqueArgs<ExtArgs>>
    ): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Glossary that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GlossaryFindUniqueOrThrowArgs} args - Arguments to find a Glossary
     * @example
     * // Get one Glossary
     * const glossary = await prisma.glossary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GlossaryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossaryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Glossary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryFindFirstArgs} args - Arguments to find a Glossary
     * @example
     * // Get one Glossary
     * const glossary = await prisma.glossary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GlossaryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossaryFindFirstArgs<ExtArgs>>
    ): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Glossary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryFindFirstOrThrowArgs} args - Arguments to find a Glossary
     * @example
     * // Get one Glossary
     * const glossary = await prisma.glossary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GlossaryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossaryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Glossaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Glossaries
     * const glossaries = await prisma.glossary.findMany()
     * 
     * // Get first 10 Glossaries
     * const glossaries = await prisma.glossary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const glossaryWithIdOnly = await prisma.glossary.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GlossaryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossaryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Glossary.
     * @param {GlossaryCreateArgs} args - Arguments to create a Glossary.
     * @example
     * // Create one Glossary
     * const Glossary = await prisma.glossary.create({
     *   data: {
     *     // ... data to create a Glossary
     *   }
     * })
     * 
    **/
    create<T extends GlossaryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GlossaryCreateArgs<ExtArgs>>
    ): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Glossary.
     * @param {GlossaryDeleteArgs} args - Arguments to delete one Glossary.
     * @example
     * // Delete one Glossary
     * const Glossary = await prisma.glossary.delete({
     *   where: {
     *     // ... filter to delete one Glossary
     *   }
     * })
     * 
    **/
    delete<T extends GlossaryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GlossaryDeleteArgs<ExtArgs>>
    ): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Glossary.
     * @param {GlossaryUpdateArgs} args - Arguments to update one Glossary.
     * @example
     * // Update one Glossary
     * const glossary = await prisma.glossary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GlossaryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GlossaryUpdateArgs<ExtArgs>>
    ): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Glossaries.
     * @param {GlossaryDeleteManyArgs} args - Arguments to filter Glossaries to delete.
     * @example
     * // Delete a few Glossaries
     * const { count } = await prisma.glossary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GlossaryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossaryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Glossaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Glossaries
     * const glossary = await prisma.glossary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GlossaryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GlossaryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Glossary.
     * @param {GlossaryUpsertArgs} args - Arguments to update or create a Glossary.
     * @example
     * // Update or create a Glossary
     * const glossary = await prisma.glossary.upsert({
     *   create: {
     *     // ... data to create a Glossary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Glossary we want to update
     *   }
     * })
    **/
    upsert<T extends GlossaryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GlossaryUpsertArgs<ExtArgs>>
    ): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Glossaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryCountArgs} args - Arguments to filter Glossaries to count.
     * @example
     * // Count the number of Glossaries
     * const count = await prisma.glossary.count({
     *   where: {
     *     // ... the filter for the Glossaries we want to count
     *   }
     * })
    **/
    count<T extends GlossaryCountArgs>(
      args?: Subset<T, GlossaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlossaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Glossary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlossaryAggregateArgs>(args: Subset<T, GlossaryAggregateArgs>): Prisma.PrismaPromise<GetGlossaryAggregateType<T>>

    /**
     * Group by Glossary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlossaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlossaryGroupByArgs['orderBy'] }
        : { orderBy?: GlossaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlossaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlossaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Glossary model
   */
  readonly fields: GlossaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Glossary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlossaryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Discipline<T extends Glossary$DisciplineArgs<ExtArgs> = {}>(args?: Subset<T, Glossary$DisciplineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Glossary model
   */ 
  interface GlossaryFieldRefs {
    readonly id: FieldRef<"Glossary", 'String'>
    readonly courseId: FieldRef<"Glossary", 'String'>
    readonly name: FieldRef<"Glossary", 'String'>
    readonly description: FieldRef<"Glossary", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Glossary findUnique
   */
  export type GlossaryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * Filter, which Glossary to fetch.
     */
    where: GlossaryWhereUniqueInput
  }


  /**
   * Glossary findUniqueOrThrow
   */
  export type GlossaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * Filter, which Glossary to fetch.
     */
    where: GlossaryWhereUniqueInput
  }


  /**
   * Glossary findFirst
   */
  export type GlossaryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * Filter, which Glossary to fetch.
     */
    where?: GlossaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Glossaries to fetch.
     */
    orderBy?: GlossaryOrderByWithRelationInput | GlossaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Glossaries.
     */
    cursor?: GlossaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Glossaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Glossaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Glossaries.
     */
    distinct?: GlossaryScalarFieldEnum | GlossaryScalarFieldEnum[]
  }


  /**
   * Glossary findFirstOrThrow
   */
  export type GlossaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * Filter, which Glossary to fetch.
     */
    where?: GlossaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Glossaries to fetch.
     */
    orderBy?: GlossaryOrderByWithRelationInput | GlossaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Glossaries.
     */
    cursor?: GlossaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Glossaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Glossaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Glossaries.
     */
    distinct?: GlossaryScalarFieldEnum | GlossaryScalarFieldEnum[]
  }


  /**
   * Glossary findMany
   */
  export type GlossaryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * Filter, which Glossaries to fetch.
     */
    where?: GlossaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Glossaries to fetch.
     */
    orderBy?: GlossaryOrderByWithRelationInput | GlossaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Glossaries.
     */
    cursor?: GlossaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Glossaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Glossaries.
     */
    skip?: number
    distinct?: GlossaryScalarFieldEnum | GlossaryScalarFieldEnum[]
  }


  /**
   * Glossary create
   */
  export type GlossaryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * The data needed to create a Glossary.
     */
    data: XOR<GlossaryCreateInput, GlossaryUncheckedCreateInput>
  }


  /**
   * Glossary update
   */
  export type GlossaryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * The data needed to update a Glossary.
     */
    data: XOR<GlossaryUpdateInput, GlossaryUncheckedUpdateInput>
    /**
     * Choose, which Glossary to update.
     */
    where: GlossaryWhereUniqueInput
  }


  /**
   * Glossary updateMany
   */
  export type GlossaryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Glossaries.
     */
    data: XOR<GlossaryUpdateManyMutationInput, GlossaryUncheckedUpdateManyInput>
    /**
     * Filter which Glossaries to update
     */
    where?: GlossaryWhereInput
  }


  /**
   * Glossary upsert
   */
  export type GlossaryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * The filter to search for the Glossary to update in case it exists.
     */
    where: GlossaryWhereUniqueInput
    /**
     * In case the Glossary found by the `where` argument doesn't exist, create a new Glossary with this data.
     */
    create: XOR<GlossaryCreateInput, GlossaryUncheckedCreateInput>
    /**
     * In case the Glossary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlossaryUpdateInput, GlossaryUncheckedUpdateInput>
  }


  /**
   * Glossary delete
   */
  export type GlossaryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
    /**
     * Filter which Glossary to delete.
     */
    where: GlossaryWhereUniqueInput
  }


  /**
   * Glossary deleteMany
   */
  export type GlossaryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Glossaries to delete
     */
    where?: GlossaryWhereInput
  }


  /**
   * Glossary.Discipline
   */
  export type Glossary$DisciplineArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    where?: DisciplineWhereInput
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    cursor?: DisciplineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }


  /**
   * Glossary without action
   */
  export type GlossaryDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossary
     */
    select?: GlossarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GlossaryInclude<ExtArgs> | null
  }



  /**
   * Model Discipline
   */

  export type AggregateDiscipline = {
    _count: DisciplineCountAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  export type DisciplineMinAggregateOutputType = {
    id: string | null
    glossaryId: string | null
    name: string | null
    description: string | null
    year: string | null
  }

  export type DisciplineMaxAggregateOutputType = {
    id: string | null
    glossaryId: string | null
    name: string | null
    description: string | null
    year: string | null
  }

  export type DisciplineCountAggregateOutputType = {
    id: number
    glossaryId: number
    name: number
    description: number
    year: number
    _all: number
  }


  export type DisciplineMinAggregateInputType = {
    id?: true
    glossaryId?: true
    name?: true
    description?: true
    year?: true
  }

  export type DisciplineMaxAggregateInputType = {
    id?: true
    glossaryId?: true
    name?: true
    description?: true
    year?: true
  }

  export type DisciplineCountAggregateInputType = {
    id?: true
    glossaryId?: true
    name?: true
    description?: true
    year?: true
    _all?: true
  }

  export type DisciplineAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discipline to aggregate.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disciplines
    **/
    _count?: true | DisciplineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplineMaxAggregateInputType
  }

  export type GetDisciplineAggregateType<T extends DisciplineAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscipline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscipline[P]>
      : GetScalarType<T[P], AggregateDiscipline[P]>
  }




  export type DisciplineGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DisciplineWhereInput
    orderBy?: DisciplineOrderByWithAggregationInput | DisciplineOrderByWithAggregationInput[]
    by: DisciplineScalarFieldEnum[] | DisciplineScalarFieldEnum
    having?: DisciplineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplineCountAggregateInputType | true
    _min?: DisciplineMinAggregateInputType
    _max?: DisciplineMaxAggregateInputType
  }

  export type DisciplineGroupByOutputType = {
    id: string
    glossaryId: string
    name: string
    description: string | null
    year: string | null
    _count: DisciplineCountAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  type GetDisciplineGroupByPayload<T extends DisciplineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisciplineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
        }
      >
    >


  export type DisciplineSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    glossaryId?: boolean
    name?: boolean
    description?: boolean
    year?: boolean
    glossary?: boolean | GlossaryDefaultArgs<ExtArgs>
    Term_Discipline_Definition?: boolean | Discipline$Term_Discipline_DefinitionArgs<ExtArgs>
    _count?: boolean | DisciplineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discipline"]>

  export type DisciplineSelectScalar = {
    id?: boolean
    glossaryId?: boolean
    name?: boolean
    description?: boolean
    year?: boolean
  }

  export type DisciplineInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    glossary?: boolean | GlossaryDefaultArgs<ExtArgs>
    Term_Discipline_Definition?: boolean | Discipline$Term_Discipline_DefinitionArgs<ExtArgs>
    _count?: boolean | DisciplineCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DisciplinePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Discipline"
    objects: {
      glossary: Prisma.$GlossaryPayload<ExtArgs>
      Term_Discipline_Definition: Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      glossaryId: string
      name: string
      description: string | null
      year: string | null
    }, ExtArgs["result"]["discipline"]>
    composites: {}
  }


  type DisciplineGetPayload<S extends boolean | null | undefined | DisciplineDefaultArgs> = $Result.GetResult<Prisma.$DisciplinePayload, S>

  type DisciplineCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DisciplineFindManyArgs, 'select' | 'include'> & {
      select?: DisciplineCountAggregateInputType | true
    }

  export interface DisciplineDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Discipline'], meta: { name: 'Discipline' } }
    /**
     * Find zero or one Discipline that matches the filter.
     * @param {DisciplineFindUniqueArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisciplineFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DisciplineFindUniqueArgs<ExtArgs>>
    ): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Discipline that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DisciplineFindUniqueOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DisciplineFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DisciplineFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Discipline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisciplineFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DisciplineFindFirstArgs<ExtArgs>>
    ): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Discipline that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DisciplineFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DisciplineFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Disciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplines
     * const disciplines = await prisma.discipline.findMany()
     * 
     * // Get first 10 Disciplines
     * const disciplines = await prisma.discipline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplineWithIdOnly = await prisma.discipline.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DisciplineFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisciplineFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Discipline.
     * @param {DisciplineCreateArgs} args - Arguments to create a Discipline.
     * @example
     * // Create one Discipline
     * const Discipline = await prisma.discipline.create({
     *   data: {
     *     // ... data to create a Discipline
     *   }
     * })
     * 
    **/
    create<T extends DisciplineCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DisciplineCreateArgs<ExtArgs>>
    ): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Discipline.
     * @param {DisciplineDeleteArgs} args - Arguments to delete one Discipline.
     * @example
     * // Delete one Discipline
     * const Discipline = await prisma.discipline.delete({
     *   where: {
     *     // ... filter to delete one Discipline
     *   }
     * })
     * 
    **/
    delete<T extends DisciplineDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DisciplineDeleteArgs<ExtArgs>>
    ): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Discipline.
     * @param {DisciplineUpdateArgs} args - Arguments to update one Discipline.
     * @example
     * // Update one Discipline
     * const discipline = await prisma.discipline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisciplineUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DisciplineUpdateArgs<ExtArgs>>
    ): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Disciplines.
     * @param {DisciplineDeleteManyArgs} args - Arguments to filter Disciplines to delete.
     * @example
     * // Delete a few Disciplines
     * const { count } = await prisma.discipline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisciplineDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisciplineDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplines
     * const discipline = await prisma.discipline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisciplineUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DisciplineUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discipline.
     * @param {DisciplineUpsertArgs} args - Arguments to update or create a Discipline.
     * @example
     * // Update or create a Discipline
     * const discipline = await prisma.discipline.upsert({
     *   create: {
     *     // ... data to create a Discipline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discipline we want to update
     *   }
     * })
    **/
    upsert<T extends DisciplineUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DisciplineUpsertArgs<ExtArgs>>
    ): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineCountArgs} args - Arguments to filter Disciplines to count.
     * @example
     * // Count the number of Disciplines
     * const count = await prisma.discipline.count({
     *   where: {
     *     // ... the filter for the Disciplines we want to count
     *   }
     * })
    **/
    count<T extends DisciplineCountArgs>(
      args?: Subset<T, DisciplineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplineAggregateArgs>(args: Subset<T, DisciplineAggregateArgs>): Prisma.PrismaPromise<GetDisciplineAggregateType<T>>

    /**
     * Group by Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplineGroupByArgs['orderBy'] }
        : { orderBy?: DisciplineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Discipline model
   */
  readonly fields: DisciplineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discipline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisciplineClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    glossary<T extends GlossaryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GlossaryDefaultArgs<ExtArgs>>): Prisma__GlossaryClient<$Result.GetResult<Prisma.$GlossaryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Term_Discipline_Definition<T extends Discipline$Term_Discipline_DefinitionArgs<ExtArgs> = {}>(args?: Subset<T, Discipline$Term_Discipline_DefinitionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Discipline model
   */ 
  interface DisciplineFieldRefs {
    readonly id: FieldRef<"Discipline", 'String'>
    readonly glossaryId: FieldRef<"Discipline", 'String'>
    readonly name: FieldRef<"Discipline", 'String'>
    readonly description: FieldRef<"Discipline", 'String'>
    readonly year: FieldRef<"Discipline", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Discipline findUnique
   */
  export type DisciplineFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline findUniqueOrThrow
   */
  export type DisciplineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline findFirst
   */
  export type DisciplineFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     */
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }


  /**
   * Discipline findFirstOrThrow
   */
  export type DisciplineFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     */
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }


  /**
   * Discipline findMany
   */
  export type DisciplineFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Disciplines to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }


  /**
   * Discipline create
   */
  export type DisciplineCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The data needed to create a Discipline.
     */
    data: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
  }


  /**
   * Discipline update
   */
  export type DisciplineUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The data needed to update a Discipline.
     */
    data: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
    /**
     * Choose, which Discipline to update.
     */
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline updateMany
   */
  export type DisciplineUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Disciplines.
     */
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyInput>
    /**
     * Filter which Disciplines to update
     */
    where?: DisciplineWhereInput
  }


  /**
   * Discipline upsert
   */
  export type DisciplineUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The filter to search for the Discipline to update in case it exists.
     */
    where: DisciplineWhereUniqueInput
    /**
     * In case the Discipline found by the `where` argument doesn't exist, create a new Discipline with this data.
     */
    create: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
    /**
     * In case the Discipline was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
  }


  /**
   * Discipline delete
   */
  export type DisciplineDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter which Discipline to delete.
     */
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline deleteMany
   */
  export type DisciplineDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Disciplines to delete
     */
    where?: DisciplineWhereInput
  }


  /**
   * Discipline.Term_Discipline_Definition
   */
  export type Discipline$Term_Discipline_DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    where?: Term_Discipline_DefinitionWhereInput
    orderBy?: Term_Discipline_DefinitionOrderByWithRelationInput | Term_Discipline_DefinitionOrderByWithRelationInput[]
    cursor?: Term_Discipline_DefinitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Term_Discipline_DefinitionScalarFieldEnum | Term_Discipline_DefinitionScalarFieldEnum[]
  }


  /**
   * Discipline without action
   */
  export type DisciplineDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude<ExtArgs> | null
  }



  /**
   * Model Term
   */

  export type AggregateTerm = {
    _count: TermCountAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  export type TermMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TermMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TermCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TermMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TermMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TermCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TermAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Term to aggregate.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terms
    **/
    _count?: true | TermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermMaxAggregateInputType
  }

  export type GetTermAggregateType<T extends TermAggregateArgs> = {
        [P in keyof T & keyof AggregateTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerm[P]>
      : GetScalarType<T[P], AggregateTerm[P]>
  }




  export type TermGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TermWhereInput
    orderBy?: TermOrderByWithAggregationInput | TermOrderByWithAggregationInput[]
    by: TermScalarFieldEnum[] | TermScalarFieldEnum
    having?: TermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermCountAggregateInputType | true
    _min?: TermMinAggregateInputType
    _max?: TermMaxAggregateInputType
  }

  export type TermGroupByOutputType = {
    id: string
    name: string
    _count: TermCountAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  type GetTermGroupByPayload<T extends TermGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TermGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermGroupByOutputType[P]>
            : GetScalarType<T[P], TermGroupByOutputType[P]>
        }
      >
    >


  export type TermSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Term_Discipline_Definition?: boolean | Term$Term_Discipline_DefinitionArgs<ExtArgs>
    Translation?: boolean | Term$TranslationArgs<ExtArgs>
    _count?: boolean | TermCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["term"]>

  export type TermSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type TermInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Term_Discipline_Definition?: boolean | Term$Term_Discipline_DefinitionArgs<ExtArgs>
    Translation?: boolean | Term$TranslationArgs<ExtArgs>
    _count?: boolean | TermCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TermPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Term"
    objects: {
      Term_Discipline_Definition: Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>[]
      Translation: Prisma.$TranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
    }, ExtArgs["result"]["term"]>
    composites: {}
  }


  type TermGetPayload<S extends boolean | null | undefined | TermDefaultArgs> = $Result.GetResult<Prisma.$TermPayload, S>

  type TermCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TermFindManyArgs, 'select' | 'include'> & {
      select?: TermCountAggregateInputType | true
    }

  export interface TermDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Term'], meta: { name: 'Term' } }
    /**
     * Find zero or one Term that matches the filter.
     * @param {TermFindUniqueArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TermFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TermFindUniqueArgs<ExtArgs>>
    ): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Term that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TermFindUniqueOrThrowArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TermFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TermFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Term that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TermFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TermFindFirstArgs<ExtArgs>>
    ): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Term that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstOrThrowArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TermFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TermFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Terms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terms
     * const terms = await prisma.term.findMany()
     * 
     * // Get first 10 Terms
     * const terms = await prisma.term.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termWithIdOnly = await prisma.term.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TermFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TermFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Term.
     * @param {TermCreateArgs} args - Arguments to create a Term.
     * @example
     * // Create one Term
     * const Term = await prisma.term.create({
     *   data: {
     *     // ... data to create a Term
     *   }
     * })
     * 
    **/
    create<T extends TermCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TermCreateArgs<ExtArgs>>
    ): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Term.
     * @param {TermDeleteArgs} args - Arguments to delete one Term.
     * @example
     * // Delete one Term
     * const Term = await prisma.term.delete({
     *   where: {
     *     // ... filter to delete one Term
     *   }
     * })
     * 
    **/
    delete<T extends TermDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TermDeleteArgs<ExtArgs>>
    ): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Term.
     * @param {TermUpdateArgs} args - Arguments to update one Term.
     * @example
     * // Update one Term
     * const term = await prisma.term.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TermUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TermUpdateArgs<ExtArgs>>
    ): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Terms.
     * @param {TermDeleteManyArgs} args - Arguments to filter Terms to delete.
     * @example
     * // Delete a few Terms
     * const { count } = await prisma.term.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TermDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TermDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terms
     * const term = await prisma.term.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TermUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TermUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Term.
     * @param {TermUpsertArgs} args - Arguments to update or create a Term.
     * @example
     * // Update or create a Term
     * const term = await prisma.term.upsert({
     *   create: {
     *     // ... data to create a Term
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Term we want to update
     *   }
     * })
    **/
    upsert<T extends TermUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TermUpsertArgs<ExtArgs>>
    ): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermCountArgs} args - Arguments to filter Terms to count.
     * @example
     * // Count the number of Terms
     * const count = await prisma.term.count({
     *   where: {
     *     // ... the filter for the Terms we want to count
     *   }
     * })
    **/
    count<T extends TermCountArgs>(
      args?: Subset<T, TermCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermAggregateArgs>(args: Subset<T, TermAggregateArgs>): Prisma.PrismaPromise<GetTermAggregateType<T>>

    /**
     * Group by Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermGroupByArgs['orderBy'] }
        : { orderBy?: TermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Term model
   */
  readonly fields: TermFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Term.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TermClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Term_Discipline_Definition<T extends Term$Term_Discipline_DefinitionArgs<ExtArgs> = {}>(args?: Subset<T, Term$Term_Discipline_DefinitionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Translation<T extends Term$TranslationArgs<ExtArgs> = {}>(args?: Subset<T, Term$TranslationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Term model
   */ 
  interface TermFieldRefs {
    readonly id: FieldRef<"Term", 'String'>
    readonly name: FieldRef<"Term", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Term findUnique
   */
  export type TermFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where: TermWhereUniqueInput
  }


  /**
   * Term findUniqueOrThrow
   */
  export type TermFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where: TermWhereUniqueInput
  }


  /**
   * Term findFirst
   */
  export type TermFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     */
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }


  /**
   * Term findFirstOrThrow
   */
  export type TermFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     */
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }


  /**
   * Term findMany
   */
  export type TermFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter, which Terms to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }


  /**
   * Term create
   */
  export type TermCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The data needed to create a Term.
     */
    data: XOR<TermCreateInput, TermUncheckedCreateInput>
  }


  /**
   * Term update
   */
  export type TermUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The data needed to update a Term.
     */
    data: XOR<TermUpdateInput, TermUncheckedUpdateInput>
    /**
     * Choose, which Term to update.
     */
    where: TermWhereUniqueInput
  }


  /**
   * Term updateMany
   */
  export type TermUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Terms.
     */
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyInput>
    /**
     * Filter which Terms to update
     */
    where?: TermWhereInput
  }


  /**
   * Term upsert
   */
  export type TermUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * The filter to search for the Term to update in case it exists.
     */
    where: TermWhereUniqueInput
    /**
     * In case the Term found by the `where` argument doesn't exist, create a new Term with this data.
     */
    create: XOR<TermCreateInput, TermUncheckedCreateInput>
    /**
     * In case the Term was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TermUpdateInput, TermUncheckedUpdateInput>
  }


  /**
   * Term delete
   */
  export type TermDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
    /**
     * Filter which Term to delete.
     */
    where: TermWhereUniqueInput
  }


  /**
   * Term deleteMany
   */
  export type TermDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Terms to delete
     */
    where?: TermWhereInput
  }


  /**
   * Term.Term_Discipline_Definition
   */
  export type Term$Term_Discipline_DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    where?: Term_Discipline_DefinitionWhereInput
    orderBy?: Term_Discipline_DefinitionOrderByWithRelationInput | Term_Discipline_DefinitionOrderByWithRelationInput[]
    cursor?: Term_Discipline_DefinitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Term_Discipline_DefinitionScalarFieldEnum | Term_Discipline_DefinitionScalarFieldEnum[]
  }


  /**
   * Term.Translation
   */
  export type Term$TranslationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    where?: TranslationWhereInput
    orderBy?: TranslationOrderByWithRelationInput | TranslationOrderByWithRelationInput[]
    cursor?: TranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TranslationScalarFieldEnum | TranslationScalarFieldEnum[]
  }


  /**
   * Term without action
   */
  export type TermDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TermInclude<ExtArgs> | null
  }



  /**
   * Model Definition
   */

  export type AggregateDefinition = {
    _count: DefinitionCountAggregateOutputType | null
    _min: DefinitionMinAggregateOutputType | null
    _max: DefinitionMaxAggregateOutputType | null
  }

  export type DefinitionMinAggregateOutputType = {
    id: string | null
    sourceId: string | null
    description: string | null
    page: string | null
  }

  export type DefinitionMaxAggregateOutputType = {
    id: string | null
    sourceId: string | null
    description: string | null
    page: string | null
  }

  export type DefinitionCountAggregateOutputType = {
    id: number
    sourceId: number
    description: number
    page: number
    _all: number
  }


  export type DefinitionMinAggregateInputType = {
    id?: true
    sourceId?: true
    description?: true
    page?: true
  }

  export type DefinitionMaxAggregateInputType = {
    id?: true
    sourceId?: true
    description?: true
    page?: true
  }

  export type DefinitionCountAggregateInputType = {
    id?: true
    sourceId?: true
    description?: true
    page?: true
    _all?: true
  }

  export type DefinitionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Definition to aggregate.
     */
    where?: DefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Definitions to fetch.
     */
    orderBy?: DefinitionOrderByWithRelationInput | DefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Definitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Definitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Definitions
    **/
    _count?: true | DefinitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DefinitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DefinitionMaxAggregateInputType
  }

  export type GetDefinitionAggregateType<T extends DefinitionAggregateArgs> = {
        [P in keyof T & keyof AggregateDefinition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDefinition[P]>
      : GetScalarType<T[P], AggregateDefinition[P]>
  }




  export type DefinitionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DefinitionWhereInput
    orderBy?: DefinitionOrderByWithAggregationInput | DefinitionOrderByWithAggregationInput[]
    by: DefinitionScalarFieldEnum[] | DefinitionScalarFieldEnum
    having?: DefinitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DefinitionCountAggregateInputType | true
    _min?: DefinitionMinAggregateInputType
    _max?: DefinitionMaxAggregateInputType
  }

  export type DefinitionGroupByOutputType = {
    id: string
    sourceId: string
    description: string | null
    page: string
    _count: DefinitionCountAggregateOutputType | null
    _min: DefinitionMinAggregateOutputType | null
    _max: DefinitionMaxAggregateOutputType | null
  }

  type GetDefinitionGroupByPayload<T extends DefinitionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DefinitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DefinitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DefinitionGroupByOutputType[P]>
            : GetScalarType<T[P], DefinitionGroupByOutputType[P]>
        }
      >
    >


  export type DefinitionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceId?: boolean
    description?: boolean
    page?: boolean
    Term_Discipline_Definition?: boolean | Definition$Term_Discipline_DefinitionArgs<ExtArgs>
    source?: boolean | SourceDefaultArgs<ExtArgs>
    _count?: boolean | DefinitionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["definition"]>

  export type DefinitionSelectScalar = {
    id?: boolean
    sourceId?: boolean
    description?: boolean
    page?: boolean
  }

  export type DefinitionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Term_Discipline_Definition?: boolean | Definition$Term_Discipline_DefinitionArgs<ExtArgs>
    source?: boolean | SourceDefaultArgs<ExtArgs>
    _count?: boolean | DefinitionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DefinitionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Definition"
    objects: {
      Term_Discipline_Definition: Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>[]
      source: Prisma.$SourcePayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      sourceId: string
      description: string | null
      page: string
    }, ExtArgs["result"]["definition"]>
    composites: {}
  }


  type DefinitionGetPayload<S extends boolean | null | undefined | DefinitionDefaultArgs> = $Result.GetResult<Prisma.$DefinitionPayload, S>

  type DefinitionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DefinitionFindManyArgs, 'select' | 'include'> & {
      select?: DefinitionCountAggregateInputType | true
    }

  export interface DefinitionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Definition'], meta: { name: 'Definition' } }
    /**
     * Find zero or one Definition that matches the filter.
     * @param {DefinitionFindUniqueArgs} args - Arguments to find a Definition
     * @example
     * // Get one Definition
     * const definition = await prisma.definition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DefinitionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DefinitionFindUniqueArgs<ExtArgs>>
    ): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Definition that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DefinitionFindUniqueOrThrowArgs} args - Arguments to find a Definition
     * @example
     * // Get one Definition
     * const definition = await prisma.definition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DefinitionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DefinitionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Definition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefinitionFindFirstArgs} args - Arguments to find a Definition
     * @example
     * // Get one Definition
     * const definition = await prisma.definition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DefinitionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DefinitionFindFirstArgs<ExtArgs>>
    ): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Definition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefinitionFindFirstOrThrowArgs} args - Arguments to find a Definition
     * @example
     * // Get one Definition
     * const definition = await prisma.definition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DefinitionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DefinitionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Definitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefinitionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Definitions
     * const definitions = await prisma.definition.findMany()
     * 
     * // Get first 10 Definitions
     * const definitions = await prisma.definition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const definitionWithIdOnly = await prisma.definition.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DefinitionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DefinitionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Definition.
     * @param {DefinitionCreateArgs} args - Arguments to create a Definition.
     * @example
     * // Create one Definition
     * const Definition = await prisma.definition.create({
     *   data: {
     *     // ... data to create a Definition
     *   }
     * })
     * 
    **/
    create<T extends DefinitionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DefinitionCreateArgs<ExtArgs>>
    ): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Definition.
     * @param {DefinitionDeleteArgs} args - Arguments to delete one Definition.
     * @example
     * // Delete one Definition
     * const Definition = await prisma.definition.delete({
     *   where: {
     *     // ... filter to delete one Definition
     *   }
     * })
     * 
    **/
    delete<T extends DefinitionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DefinitionDeleteArgs<ExtArgs>>
    ): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Definition.
     * @param {DefinitionUpdateArgs} args - Arguments to update one Definition.
     * @example
     * // Update one Definition
     * const definition = await prisma.definition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DefinitionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DefinitionUpdateArgs<ExtArgs>>
    ): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Definitions.
     * @param {DefinitionDeleteManyArgs} args - Arguments to filter Definitions to delete.
     * @example
     * // Delete a few Definitions
     * const { count } = await prisma.definition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DefinitionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DefinitionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Definitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefinitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Definitions
     * const definition = await prisma.definition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DefinitionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DefinitionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Definition.
     * @param {DefinitionUpsertArgs} args - Arguments to update or create a Definition.
     * @example
     * // Update or create a Definition
     * const definition = await prisma.definition.upsert({
     *   create: {
     *     // ... data to create a Definition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Definition we want to update
     *   }
     * })
    **/
    upsert<T extends DefinitionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DefinitionUpsertArgs<ExtArgs>>
    ): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Definitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefinitionCountArgs} args - Arguments to filter Definitions to count.
     * @example
     * // Count the number of Definitions
     * const count = await prisma.definition.count({
     *   where: {
     *     // ... the filter for the Definitions we want to count
     *   }
     * })
    **/
    count<T extends DefinitionCountArgs>(
      args?: Subset<T, DefinitionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DefinitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Definition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefinitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DefinitionAggregateArgs>(args: Subset<T, DefinitionAggregateArgs>): Prisma.PrismaPromise<GetDefinitionAggregateType<T>>

    /**
     * Group by Definition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefinitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DefinitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DefinitionGroupByArgs['orderBy'] }
        : { orderBy?: DefinitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DefinitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDefinitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Definition model
   */
  readonly fields: DefinitionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Definition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DefinitionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Term_Discipline_Definition<T extends Definition$Term_Discipline_DefinitionArgs<ExtArgs> = {}>(args?: Subset<T, Definition$Term_Discipline_DefinitionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'findMany'> | Null>;

    source<T extends SourceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SourceDefaultArgs<ExtArgs>>): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Definition model
   */ 
  interface DefinitionFieldRefs {
    readonly id: FieldRef<"Definition", 'String'>
    readonly sourceId: FieldRef<"Definition", 'String'>
    readonly description: FieldRef<"Definition", 'String'>
    readonly page: FieldRef<"Definition", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Definition findUnique
   */
  export type DefinitionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Definition to fetch.
     */
    where: DefinitionWhereUniqueInput
  }


  /**
   * Definition findUniqueOrThrow
   */
  export type DefinitionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Definition to fetch.
     */
    where: DefinitionWhereUniqueInput
  }


  /**
   * Definition findFirst
   */
  export type DefinitionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Definition to fetch.
     */
    where?: DefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Definitions to fetch.
     */
    orderBy?: DefinitionOrderByWithRelationInput | DefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Definitions.
     */
    cursor?: DefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Definitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Definitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Definitions.
     */
    distinct?: DefinitionScalarFieldEnum | DefinitionScalarFieldEnum[]
  }


  /**
   * Definition findFirstOrThrow
   */
  export type DefinitionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Definition to fetch.
     */
    where?: DefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Definitions to fetch.
     */
    orderBy?: DefinitionOrderByWithRelationInput | DefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Definitions.
     */
    cursor?: DefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Definitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Definitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Definitions.
     */
    distinct?: DefinitionScalarFieldEnum | DefinitionScalarFieldEnum[]
  }


  /**
   * Definition findMany
   */
  export type DefinitionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Definitions to fetch.
     */
    where?: DefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Definitions to fetch.
     */
    orderBy?: DefinitionOrderByWithRelationInput | DefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Definitions.
     */
    cursor?: DefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Definitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Definitions.
     */
    skip?: number
    distinct?: DefinitionScalarFieldEnum | DefinitionScalarFieldEnum[]
  }


  /**
   * Definition create
   */
  export type DefinitionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * The data needed to create a Definition.
     */
    data: XOR<DefinitionCreateInput, DefinitionUncheckedCreateInput>
  }


  /**
   * Definition update
   */
  export type DefinitionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * The data needed to update a Definition.
     */
    data: XOR<DefinitionUpdateInput, DefinitionUncheckedUpdateInput>
    /**
     * Choose, which Definition to update.
     */
    where: DefinitionWhereUniqueInput
  }


  /**
   * Definition updateMany
   */
  export type DefinitionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Definitions.
     */
    data: XOR<DefinitionUpdateManyMutationInput, DefinitionUncheckedUpdateManyInput>
    /**
     * Filter which Definitions to update
     */
    where?: DefinitionWhereInput
  }


  /**
   * Definition upsert
   */
  export type DefinitionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * The filter to search for the Definition to update in case it exists.
     */
    where: DefinitionWhereUniqueInput
    /**
     * In case the Definition found by the `where` argument doesn't exist, create a new Definition with this data.
     */
    create: XOR<DefinitionCreateInput, DefinitionUncheckedCreateInput>
    /**
     * In case the Definition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DefinitionUpdateInput, DefinitionUncheckedUpdateInput>
  }


  /**
   * Definition delete
   */
  export type DefinitionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    /**
     * Filter which Definition to delete.
     */
    where: DefinitionWhereUniqueInput
  }


  /**
   * Definition deleteMany
   */
  export type DefinitionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Definitions to delete
     */
    where?: DefinitionWhereInput
  }


  /**
   * Definition.Term_Discipline_Definition
   */
  export type Definition$Term_Discipline_DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    where?: Term_Discipline_DefinitionWhereInput
    orderBy?: Term_Discipline_DefinitionOrderByWithRelationInput | Term_Discipline_DefinitionOrderByWithRelationInput[]
    cursor?: Term_Discipline_DefinitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Term_Discipline_DefinitionScalarFieldEnum | Term_Discipline_DefinitionScalarFieldEnum[]
  }


  /**
   * Definition without action
   */
  export type DefinitionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
  }



  /**
   * Model Translation
   */

  export type AggregateTranslation = {
    _count: TranslationCountAggregateOutputType | null
    _min: TranslationMinAggregateOutputType | null
    _max: TranslationMaxAggregateOutputType | null
  }

  export type TranslationMinAggregateOutputType = {
    translationId: string | null
    termId: string | null
    sourceId: string | null
    language: string | null
    translation: string | null
    page: string | null
  }

  export type TranslationMaxAggregateOutputType = {
    translationId: string | null
    termId: string | null
    sourceId: string | null
    language: string | null
    translation: string | null
    page: string | null
  }

  export type TranslationCountAggregateOutputType = {
    translationId: number
    termId: number
    sourceId: number
    language: number
    translation: number
    page: number
    _all: number
  }


  export type TranslationMinAggregateInputType = {
    translationId?: true
    termId?: true
    sourceId?: true
    language?: true
    translation?: true
    page?: true
  }

  export type TranslationMaxAggregateInputType = {
    translationId?: true
    termId?: true
    sourceId?: true
    language?: true
    translation?: true
    page?: true
  }

  export type TranslationCountAggregateInputType = {
    translationId?: true
    termId?: true
    sourceId?: true
    language?: true
    translation?: true
    page?: true
    _all?: true
  }

  export type TranslationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Translation to aggregate.
     */
    where?: TranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Translations to fetch.
     */
    orderBy?: TranslationOrderByWithRelationInput | TranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Translations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Translations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Translations
    **/
    _count?: true | TranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TranslationMaxAggregateInputType
  }

  export type GetTranslationAggregateType<T extends TranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTranslation[P]>
      : GetScalarType<T[P], AggregateTranslation[P]>
  }




  export type TranslationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TranslationWhereInput
    orderBy?: TranslationOrderByWithAggregationInput | TranslationOrderByWithAggregationInput[]
    by: TranslationScalarFieldEnum[] | TranslationScalarFieldEnum
    having?: TranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TranslationCountAggregateInputType | true
    _min?: TranslationMinAggregateInputType
    _max?: TranslationMaxAggregateInputType
  }

  export type TranslationGroupByOutputType = {
    translationId: string
    termId: string
    sourceId: string
    language: string | null
    translation: string | null
    page: string | null
    _count: TranslationCountAggregateOutputType | null
    _min: TranslationMinAggregateOutputType | null
    _max: TranslationMaxAggregateOutputType | null
  }

  type GetTranslationGroupByPayload<T extends TranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TranslationGroupByOutputType[P]>
            : GetScalarType<T[P], TranslationGroupByOutputType[P]>
        }
      >
    >


  export type TranslationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    translationId?: boolean
    termId?: boolean
    sourceId?: boolean
    language?: boolean
    translation?: boolean
    page?: boolean
    source?: boolean | SourceDefaultArgs<ExtArgs>
    term?: boolean | TermDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["translation"]>

  export type TranslationSelectScalar = {
    translationId?: boolean
    termId?: boolean
    sourceId?: boolean
    language?: boolean
    translation?: boolean
    page?: boolean
  }

  export type TranslationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    source?: boolean | SourceDefaultArgs<ExtArgs>
    term?: boolean | TermDefaultArgs<ExtArgs>
  }


  export type $TranslationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Translation"
    objects: {
      source: Prisma.$SourcePayload<ExtArgs>
      term: Prisma.$TermPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      translationId: string
      termId: string
      sourceId: string
      language: string | null
      translation: string | null
      page: string | null
    }, ExtArgs["result"]["translation"]>
    composites: {}
  }


  type TranslationGetPayload<S extends boolean | null | undefined | TranslationDefaultArgs> = $Result.GetResult<Prisma.$TranslationPayload, S>

  type TranslationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TranslationFindManyArgs, 'select' | 'include'> & {
      select?: TranslationCountAggregateInputType | true
    }

  export interface TranslationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Translation'], meta: { name: 'Translation' } }
    /**
     * Find zero or one Translation that matches the filter.
     * @param {TranslationFindUniqueArgs} args - Arguments to find a Translation
     * @example
     * // Get one Translation
     * const translation = await prisma.translation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TranslationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TranslationFindUniqueArgs<ExtArgs>>
    ): Prisma__TranslationClient<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Translation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TranslationFindUniqueOrThrowArgs} args - Arguments to find a Translation
     * @example
     * // Get one Translation
     * const translation = await prisma.translation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TranslationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TranslationClient<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Translation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslationFindFirstArgs} args - Arguments to find a Translation
     * @example
     * // Get one Translation
     * const translation = await prisma.translation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TranslationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslationFindFirstArgs<ExtArgs>>
    ): Prisma__TranslationClient<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Translation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslationFindFirstOrThrowArgs} args - Arguments to find a Translation
     * @example
     * // Get one Translation
     * const translation = await prisma.translation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TranslationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TranslationClient<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Translations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Translations
     * const translations = await prisma.translation.findMany()
     * 
     * // Get first 10 Translations
     * const translations = await prisma.translation.findMany({ take: 10 })
     * 
     * // Only select the `translationId`
     * const translationWithTranslationIdOnly = await prisma.translation.findMany({ select: { translationId: true } })
     * 
    **/
    findMany<T extends TranslationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Translation.
     * @param {TranslationCreateArgs} args - Arguments to create a Translation.
     * @example
     * // Create one Translation
     * const Translation = await prisma.translation.create({
     *   data: {
     *     // ... data to create a Translation
     *   }
     * })
     * 
    **/
    create<T extends TranslationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TranslationCreateArgs<ExtArgs>>
    ): Prisma__TranslationClient<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Translation.
     * @param {TranslationDeleteArgs} args - Arguments to delete one Translation.
     * @example
     * // Delete one Translation
     * const Translation = await prisma.translation.delete({
     *   where: {
     *     // ... filter to delete one Translation
     *   }
     * })
     * 
    **/
    delete<T extends TranslationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TranslationDeleteArgs<ExtArgs>>
    ): Prisma__TranslationClient<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Translation.
     * @param {TranslationUpdateArgs} args - Arguments to update one Translation.
     * @example
     * // Update one Translation
     * const translation = await prisma.translation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TranslationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TranslationUpdateArgs<ExtArgs>>
    ): Prisma__TranslationClient<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Translations.
     * @param {TranslationDeleteManyArgs} args - Arguments to filter Translations to delete.
     * @example
     * // Delete a few Translations
     * const { count } = await prisma.translation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TranslationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TranslationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Translations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Translations
     * const translation = await prisma.translation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TranslationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TranslationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Translation.
     * @param {TranslationUpsertArgs} args - Arguments to update or create a Translation.
     * @example
     * // Update or create a Translation
     * const translation = await prisma.translation.upsert({
     *   create: {
     *     // ... data to create a Translation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Translation we want to update
     *   }
     * })
    **/
    upsert<T extends TranslationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TranslationUpsertArgs<ExtArgs>>
    ): Prisma__TranslationClient<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Translations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslationCountArgs} args - Arguments to filter Translations to count.
     * @example
     * // Count the number of Translations
     * const count = await prisma.translation.count({
     *   where: {
     *     // ... the filter for the Translations we want to count
     *   }
     * })
    **/
    count<T extends TranslationCountArgs>(
      args?: Subset<T, TranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Translation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TranslationAggregateArgs>(args: Subset<T, TranslationAggregateArgs>): Prisma.PrismaPromise<GetTranslationAggregateType<T>>

    /**
     * Group by Translation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TranslationGroupByArgs['orderBy'] }
        : { orderBy?: TranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Translation model
   */
  readonly fields: TranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Translation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TranslationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    source<T extends SourceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SourceDefaultArgs<ExtArgs>>): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    term<T extends TermDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TermDefaultArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Translation model
   */ 
  interface TranslationFieldRefs {
    readonly translationId: FieldRef<"Translation", 'String'>
    readonly termId: FieldRef<"Translation", 'String'>
    readonly sourceId: FieldRef<"Translation", 'String'>
    readonly language: FieldRef<"Translation", 'String'>
    readonly translation: FieldRef<"Translation", 'String'>
    readonly page: FieldRef<"Translation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Translation findUnique
   */
  export type TranslationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * Filter, which Translation to fetch.
     */
    where: TranslationWhereUniqueInput
  }


  /**
   * Translation findUniqueOrThrow
   */
  export type TranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * Filter, which Translation to fetch.
     */
    where: TranslationWhereUniqueInput
  }


  /**
   * Translation findFirst
   */
  export type TranslationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * Filter, which Translation to fetch.
     */
    where?: TranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Translations to fetch.
     */
    orderBy?: TranslationOrderByWithRelationInput | TranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Translations.
     */
    cursor?: TranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Translations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Translations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Translations.
     */
    distinct?: TranslationScalarFieldEnum | TranslationScalarFieldEnum[]
  }


  /**
   * Translation findFirstOrThrow
   */
  export type TranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * Filter, which Translation to fetch.
     */
    where?: TranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Translations to fetch.
     */
    orderBy?: TranslationOrderByWithRelationInput | TranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Translations.
     */
    cursor?: TranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Translations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Translations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Translations.
     */
    distinct?: TranslationScalarFieldEnum | TranslationScalarFieldEnum[]
  }


  /**
   * Translation findMany
   */
  export type TranslationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * Filter, which Translations to fetch.
     */
    where?: TranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Translations to fetch.
     */
    orderBy?: TranslationOrderByWithRelationInput | TranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Translations.
     */
    cursor?: TranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Translations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Translations.
     */
    skip?: number
    distinct?: TranslationScalarFieldEnum | TranslationScalarFieldEnum[]
  }


  /**
   * Translation create
   */
  export type TranslationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a Translation.
     */
    data: XOR<TranslationCreateInput, TranslationUncheckedCreateInput>
  }


  /**
   * Translation update
   */
  export type TranslationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a Translation.
     */
    data: XOR<TranslationUpdateInput, TranslationUncheckedUpdateInput>
    /**
     * Choose, which Translation to update.
     */
    where: TranslationWhereUniqueInput
  }


  /**
   * Translation updateMany
   */
  export type TranslationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Translations.
     */
    data: XOR<TranslationUpdateManyMutationInput, TranslationUncheckedUpdateManyInput>
    /**
     * Filter which Translations to update
     */
    where?: TranslationWhereInput
  }


  /**
   * Translation upsert
   */
  export type TranslationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the Translation to update in case it exists.
     */
    where: TranslationWhereUniqueInput
    /**
     * In case the Translation found by the `where` argument doesn't exist, create a new Translation with this data.
     */
    create: XOR<TranslationCreateInput, TranslationUncheckedCreateInput>
    /**
     * In case the Translation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TranslationUpdateInput, TranslationUncheckedUpdateInput>
  }


  /**
   * Translation delete
   */
  export type TranslationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    /**
     * Filter which Translation to delete.
     */
    where: TranslationWhereUniqueInput
  }


  /**
   * Translation deleteMany
   */
  export type TranslationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Translations to delete
     */
    where?: TranslationWhereInput
  }


  /**
   * Translation without action
   */
  export type TranslationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
  }



  /**
   * Model Source
   */

  export type AggregateSource = {
    _count: SourceCountAggregateOutputType | null
    _min: SourceMinAggregateOutputType | null
    _max: SourceMaxAggregateOutputType | null
  }

  export type SourceMinAggregateOutputType = {
    sourceId: string | null
    title: string | null
    publisher: string | null
    year: string | null
    type_publication: string | null
  }

  export type SourceMaxAggregateOutputType = {
    sourceId: string | null
    title: string | null
    publisher: string | null
    year: string | null
    type_publication: string | null
  }

  export type SourceCountAggregateOutputType = {
    sourceId: number
    title: number
    publisher: number
    year: number
    type_publication: number
    _all: number
  }


  export type SourceMinAggregateInputType = {
    sourceId?: true
    title?: true
    publisher?: true
    year?: true
    type_publication?: true
  }

  export type SourceMaxAggregateInputType = {
    sourceId?: true
    title?: true
    publisher?: true
    year?: true
    type_publication?: true
  }

  export type SourceCountAggregateInputType = {
    sourceId?: true
    title?: true
    publisher?: true
    year?: true
    type_publication?: true
    _all?: true
  }

  export type SourceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Source to aggregate.
     */
    where?: SourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sources to fetch.
     */
    orderBy?: SourceOrderByWithRelationInput | SourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sources
    **/
    _count?: true | SourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SourceMaxAggregateInputType
  }

  export type GetSourceAggregateType<T extends SourceAggregateArgs> = {
        [P in keyof T & keyof AggregateSource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSource[P]>
      : GetScalarType<T[P], AggregateSource[P]>
  }




  export type SourceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SourceWhereInput
    orderBy?: SourceOrderByWithAggregationInput | SourceOrderByWithAggregationInput[]
    by: SourceScalarFieldEnum[] | SourceScalarFieldEnum
    having?: SourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SourceCountAggregateInputType | true
    _min?: SourceMinAggregateInputType
    _max?: SourceMaxAggregateInputType
  }

  export type SourceGroupByOutputType = {
    sourceId: string
    title: string | null
    publisher: string | null
    year: string | null
    type_publication: string | null
    _count: SourceCountAggregateOutputType | null
    _min: SourceMinAggregateOutputType | null
    _max: SourceMaxAggregateOutputType | null
  }

  type GetSourceGroupByPayload<T extends SourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SourceGroupByOutputType[P]>
            : GetScalarType<T[P], SourceGroupByOutputType[P]>
        }
      >
    >


  export type SourceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sourceId?: boolean
    title?: boolean
    publisher?: boolean
    year?: boolean
    type_publication?: boolean
    Source_Authorship?: boolean | Source$Source_AuthorshipArgs<ExtArgs>
    Translation?: boolean | Source$TranslationArgs<ExtArgs>
    Definition?: boolean | Source$DefinitionArgs<ExtArgs>
    _count?: boolean | SourceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["source"]>

  export type SourceSelectScalar = {
    sourceId?: boolean
    title?: boolean
    publisher?: boolean
    year?: boolean
    type_publication?: boolean
  }

  export type SourceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Source_Authorship?: boolean | Source$Source_AuthorshipArgs<ExtArgs>
    Translation?: boolean | Source$TranslationArgs<ExtArgs>
    Definition?: boolean | Source$DefinitionArgs<ExtArgs>
    _count?: boolean | SourceCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SourcePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Source"
    objects: {
      Source_Authorship: Prisma.$Source_AuthorshipPayload<ExtArgs>[]
      Translation: Prisma.$TranslationPayload<ExtArgs>[]
      Definition: Prisma.$DefinitionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      sourceId: string
      title: string | null
      publisher: string | null
      year: string | null
      type_publication: string | null
    }, ExtArgs["result"]["source"]>
    composites: {}
  }


  type SourceGetPayload<S extends boolean | null | undefined | SourceDefaultArgs> = $Result.GetResult<Prisma.$SourcePayload, S>

  type SourceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SourceFindManyArgs, 'select' | 'include'> & {
      select?: SourceCountAggregateInputType | true
    }

  export interface SourceDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Source'], meta: { name: 'Source' } }
    /**
     * Find zero or one Source that matches the filter.
     * @param {SourceFindUniqueArgs} args - Arguments to find a Source
     * @example
     * // Get one Source
     * const source = await prisma.source.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SourceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SourceFindUniqueArgs<ExtArgs>>
    ): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Source that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SourceFindUniqueOrThrowArgs} args - Arguments to find a Source
     * @example
     * // Get one Source
     * const source = await prisma.source.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SourceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Source that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceFindFirstArgs} args - Arguments to find a Source
     * @example
     * // Get one Source
     * const source = await prisma.source.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SourceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceFindFirstArgs<ExtArgs>>
    ): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Source that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceFindFirstOrThrowArgs} args - Arguments to find a Source
     * @example
     * // Get one Source
     * const source = await prisma.source.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SourceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sources
     * const sources = await prisma.source.findMany()
     * 
     * // Get first 10 Sources
     * const sources = await prisma.source.findMany({ take: 10 })
     * 
     * // Only select the `sourceId`
     * const sourceWithSourceIdOnly = await prisma.source.findMany({ select: { sourceId: true } })
     * 
    **/
    findMany<T extends SourceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Source.
     * @param {SourceCreateArgs} args - Arguments to create a Source.
     * @example
     * // Create one Source
     * const Source = await prisma.source.create({
     *   data: {
     *     // ... data to create a Source
     *   }
     * })
     * 
    **/
    create<T extends SourceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SourceCreateArgs<ExtArgs>>
    ): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Source.
     * @param {SourceDeleteArgs} args - Arguments to delete one Source.
     * @example
     * // Delete one Source
     * const Source = await prisma.source.delete({
     *   where: {
     *     // ... filter to delete one Source
     *   }
     * })
     * 
    **/
    delete<T extends SourceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SourceDeleteArgs<ExtArgs>>
    ): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Source.
     * @param {SourceUpdateArgs} args - Arguments to update one Source.
     * @example
     * // Update one Source
     * const source = await prisma.source.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SourceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SourceUpdateArgs<ExtArgs>>
    ): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sources.
     * @param {SourceDeleteManyArgs} args - Arguments to filter Sources to delete.
     * @example
     * // Delete a few Sources
     * const { count } = await prisma.source.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SourceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sources
     * const source = await prisma.source.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SourceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SourceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Source.
     * @param {SourceUpsertArgs} args - Arguments to update or create a Source.
     * @example
     * // Update or create a Source
     * const source = await prisma.source.upsert({
     *   create: {
     *     // ... data to create a Source
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Source we want to update
     *   }
     * })
    **/
    upsert<T extends SourceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SourceUpsertArgs<ExtArgs>>
    ): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceCountArgs} args - Arguments to filter Sources to count.
     * @example
     * // Count the number of Sources
     * const count = await prisma.source.count({
     *   where: {
     *     // ... the filter for the Sources we want to count
     *   }
     * })
    **/
    count<T extends SourceCountArgs>(
      args?: Subset<T, SourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Source.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SourceAggregateArgs>(args: Subset<T, SourceAggregateArgs>): Prisma.PrismaPromise<GetSourceAggregateType<T>>

    /**
     * Group by Source.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SourceGroupByArgs['orderBy'] }
        : { orderBy?: SourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Source model
   */
  readonly fields: SourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Source.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SourceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Source_Authorship<T extends Source$Source_AuthorshipArgs<ExtArgs> = {}>(args?: Subset<T, Source$Source_AuthorshipArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'findMany'> | Null>;

    Translation<T extends Source$TranslationArgs<ExtArgs> = {}>(args?: Subset<T, Source$TranslationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TranslationPayload<ExtArgs>, T, 'findMany'> | Null>;

    Definition<T extends Source$DefinitionArgs<ExtArgs> = {}>(args?: Subset<T, Source$DefinitionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Source model
   */ 
  interface SourceFieldRefs {
    readonly sourceId: FieldRef<"Source", 'String'>
    readonly title: FieldRef<"Source", 'String'>
    readonly publisher: FieldRef<"Source", 'String'>
    readonly year: FieldRef<"Source", 'String'>
    readonly type_publication: FieldRef<"Source", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Source findUnique
   */
  export type SourceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * Filter, which Source to fetch.
     */
    where: SourceWhereUniqueInput
  }


  /**
   * Source findUniqueOrThrow
   */
  export type SourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * Filter, which Source to fetch.
     */
    where: SourceWhereUniqueInput
  }


  /**
   * Source findFirst
   */
  export type SourceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * Filter, which Source to fetch.
     */
    where?: SourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sources to fetch.
     */
    orderBy?: SourceOrderByWithRelationInput | SourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sources.
     */
    cursor?: SourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sources.
     */
    distinct?: SourceScalarFieldEnum | SourceScalarFieldEnum[]
  }


  /**
   * Source findFirstOrThrow
   */
  export type SourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * Filter, which Source to fetch.
     */
    where?: SourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sources to fetch.
     */
    orderBy?: SourceOrderByWithRelationInput | SourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sources.
     */
    cursor?: SourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sources.
     */
    distinct?: SourceScalarFieldEnum | SourceScalarFieldEnum[]
  }


  /**
   * Source findMany
   */
  export type SourceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * Filter, which Sources to fetch.
     */
    where?: SourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sources to fetch.
     */
    orderBy?: SourceOrderByWithRelationInput | SourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sources.
     */
    cursor?: SourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sources.
     */
    skip?: number
    distinct?: SourceScalarFieldEnum | SourceScalarFieldEnum[]
  }


  /**
   * Source create
   */
  export type SourceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * The data needed to create a Source.
     */
    data?: XOR<SourceCreateInput, SourceUncheckedCreateInput>
  }


  /**
   * Source update
   */
  export type SourceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * The data needed to update a Source.
     */
    data: XOR<SourceUpdateInput, SourceUncheckedUpdateInput>
    /**
     * Choose, which Source to update.
     */
    where: SourceWhereUniqueInput
  }


  /**
   * Source updateMany
   */
  export type SourceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sources.
     */
    data: XOR<SourceUpdateManyMutationInput, SourceUncheckedUpdateManyInput>
    /**
     * Filter which Sources to update
     */
    where?: SourceWhereInput
  }


  /**
   * Source upsert
   */
  export type SourceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * The filter to search for the Source to update in case it exists.
     */
    where: SourceWhereUniqueInput
    /**
     * In case the Source found by the `where` argument doesn't exist, create a new Source with this data.
     */
    create: XOR<SourceCreateInput, SourceUncheckedCreateInput>
    /**
     * In case the Source was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SourceUpdateInput, SourceUncheckedUpdateInput>
  }


  /**
   * Source delete
   */
  export type SourceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
    /**
     * Filter which Source to delete.
     */
    where: SourceWhereUniqueInput
  }


  /**
   * Source deleteMany
   */
  export type SourceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sources to delete
     */
    where?: SourceWhereInput
  }


  /**
   * Source.Source_Authorship
   */
  export type Source$Source_AuthorshipArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    where?: Source_AuthorshipWhereInput
    orderBy?: Source_AuthorshipOrderByWithRelationInput | Source_AuthorshipOrderByWithRelationInput[]
    cursor?: Source_AuthorshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Source_AuthorshipScalarFieldEnum | Source_AuthorshipScalarFieldEnum[]
  }


  /**
   * Source.Translation
   */
  export type Source$TranslationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Translation
     */
    select?: TranslationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TranslationInclude<ExtArgs> | null
    where?: TranslationWhereInput
    orderBy?: TranslationOrderByWithRelationInput | TranslationOrderByWithRelationInput[]
    cursor?: TranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TranslationScalarFieldEnum | TranslationScalarFieldEnum[]
  }


  /**
   * Source.Definition
   */
  export type Source$DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    where?: DefinitionWhereInput
    orderBy?: DefinitionOrderByWithRelationInput | DefinitionOrderByWithRelationInput[]
    cursor?: DefinitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DefinitionScalarFieldEnum | DefinitionScalarFieldEnum[]
  }


  /**
   * Source without action
   */
  export type SourceDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source
     */
    select?: SourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SourceInclude<ExtArgs> | null
  }



  /**
   * Model Author
   */

  export type AggregateAuthor = {
    _count: AuthorCountAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  export type AuthorMinAggregateOutputType = {
    authorId: string | null
    name: string | null
  }

  export type AuthorMaxAggregateOutputType = {
    authorId: string | null
    name: string | null
  }

  export type AuthorCountAggregateOutputType = {
    authorId: number
    name: number
    _all: number
  }


  export type AuthorMinAggregateInputType = {
    authorId?: true
    name?: true
  }

  export type AuthorMaxAggregateInputType = {
    authorId?: true
    name?: true
  }

  export type AuthorCountAggregateInputType = {
    authorId?: true
    name?: true
    _all?: true
  }

  export type AuthorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Author to aggregate.
     */
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     */
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Authors
    **/
    _count?: true | AuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorMaxAggregateInputType
  }

  export type GetAuthorAggregateType<T extends AuthorAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthor[P]>
      : GetScalarType<T[P], AggregateAuthor[P]>
  }




  export type AuthorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuthorWhereInput
    orderBy?: AuthorOrderByWithAggregationInput | AuthorOrderByWithAggregationInput[]
    by: AuthorScalarFieldEnum[] | AuthorScalarFieldEnum
    having?: AuthorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorCountAggregateInputType | true
    _min?: AuthorMinAggregateInputType
    _max?: AuthorMaxAggregateInputType
  }

  export type AuthorGroupByOutputType = {
    authorId: string
    name: string | null
    _count: AuthorCountAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  type GetAuthorGroupByPayload<T extends AuthorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorGroupByOutputType[P]>
        }
      >
    >


  export type AuthorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    authorId?: boolean
    name?: boolean
    Source_Authorship?: boolean | Author$Source_AuthorshipArgs<ExtArgs>
    _count?: boolean | AuthorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["author"]>

  export type AuthorSelectScalar = {
    authorId?: boolean
    name?: boolean
  }

  export type AuthorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Source_Authorship?: boolean | Author$Source_AuthorshipArgs<ExtArgs>
    _count?: boolean | AuthorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AuthorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Author"
    objects: {
      Source_Authorship: Prisma.$Source_AuthorshipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      authorId: string
      name: string | null
    }, ExtArgs["result"]["author"]>
    composites: {}
  }


  type AuthorGetPayload<S extends boolean | null | undefined | AuthorDefaultArgs> = $Result.GetResult<Prisma.$AuthorPayload, S>

  type AuthorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AuthorFindManyArgs, 'select' | 'include'> & {
      select?: AuthorCountAggregateInputType | true
    }

  export interface AuthorDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Author'], meta: { name: 'Author' } }
    /**
     * Find zero or one Author that matches the filter.
     * @param {AuthorFindUniqueArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuthorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorFindUniqueArgs<ExtArgs>>
    ): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Author that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuthorFindUniqueOrThrowArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuthorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Author that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindFirstArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuthorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorFindFirstArgs<ExtArgs>>
    ): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Author that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindFirstOrThrowArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuthorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authors
     * const authors = await prisma.author.findMany()
     * 
     * // Get first 10 Authors
     * const authors = await prisma.author.findMany({ take: 10 })
     * 
     * // Only select the `authorId`
     * const authorWithAuthorIdOnly = await prisma.author.findMany({ select: { authorId: true } })
     * 
    **/
    findMany<T extends AuthorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Author.
     * @param {AuthorCreateArgs} args - Arguments to create a Author.
     * @example
     * // Create one Author
     * const Author = await prisma.author.create({
     *   data: {
     *     // ... data to create a Author
     *   }
     * })
     * 
    **/
    create<T extends AuthorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorCreateArgs<ExtArgs>>
    ): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Author.
     * @param {AuthorDeleteArgs} args - Arguments to delete one Author.
     * @example
     * // Delete one Author
     * const Author = await prisma.author.delete({
     *   where: {
     *     // ... filter to delete one Author
     *   }
     * })
     * 
    **/
    delete<T extends AuthorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorDeleteArgs<ExtArgs>>
    ): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Author.
     * @param {AuthorUpdateArgs} args - Arguments to update one Author.
     * @example
     * // Update one Author
     * const author = await prisma.author.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuthorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorUpdateArgs<ExtArgs>>
    ): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Authors.
     * @param {AuthorDeleteManyArgs} args - Arguments to filter Authors to delete.
     * @example
     * // Delete a few Authors
     * const { count } = await prisma.author.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuthorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuthorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authors
     * const author = await prisma.author.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuthorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Author.
     * @param {AuthorUpsertArgs} args - Arguments to update or create a Author.
     * @example
     * // Update or create a Author
     * const author = await prisma.author.upsert({
     *   create: {
     *     // ... data to create a Author
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Author we want to update
     *   }
     * })
    **/
    upsert<T extends AuthorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuthorUpsertArgs<ExtArgs>>
    ): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorCountArgs} args - Arguments to filter Authors to count.
     * @example
     * // Count the number of Authors
     * const count = await prisma.author.count({
     *   where: {
     *     // ... the filter for the Authors we want to count
     *   }
     * })
    **/
    count<T extends AuthorCountArgs>(
      args?: Subset<T, AuthorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorAggregateArgs>(args: Subset<T, AuthorAggregateArgs>): Prisma.PrismaPromise<GetAuthorAggregateType<T>>

    /**
     * Group by Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorGroupByArgs['orderBy'] }
        : { orderBy?: AuthorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Author model
   */
  readonly fields: AuthorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Author.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Source_Authorship<T extends Author$Source_AuthorshipArgs<ExtArgs> = {}>(args?: Subset<T, Author$Source_AuthorshipArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Author model
   */ 
  interface AuthorFieldRefs {
    readonly authorId: FieldRef<"Author", 'String'>
    readonly name: FieldRef<"Author", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Author findUnique
   */
  export type AuthorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Author to fetch.
     */
    where: AuthorWhereUniqueInput
  }


  /**
   * Author findUniqueOrThrow
   */
  export type AuthorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Author to fetch.
     */
    where: AuthorWhereUniqueInput
  }


  /**
   * Author findFirst
   */
  export type AuthorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Author to fetch.
     */
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     */
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authors.
     */
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authors.
     */
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }


  /**
   * Author findFirstOrThrow
   */
  export type AuthorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Author to fetch.
     */
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     */
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authors.
     */
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authors.
     */
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }


  /**
   * Author findMany
   */
  export type AuthorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Authors to fetch.
     */
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     */
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Authors.
     */
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     */
    skip?: number
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }


  /**
   * Author create
   */
  export type AuthorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * The data needed to create a Author.
     */
    data?: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
  }


  /**
   * Author update
   */
  export type AuthorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * The data needed to update a Author.
     */
    data: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
    /**
     * Choose, which Author to update.
     */
    where: AuthorWhereUniqueInput
  }


  /**
   * Author updateMany
   */
  export type AuthorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Authors.
     */
    data: XOR<AuthorUpdateManyMutationInput, AuthorUncheckedUpdateManyInput>
    /**
     * Filter which Authors to update
     */
    where?: AuthorWhereInput
  }


  /**
   * Author upsert
   */
  export type AuthorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * The filter to search for the Author to update in case it exists.
     */
    where: AuthorWhereUniqueInput
    /**
     * In case the Author found by the `where` argument doesn't exist, create a new Author with this data.
     */
    create: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
    /**
     * In case the Author was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
  }


  /**
   * Author delete
   */
  export type AuthorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter which Author to delete.
     */
    where: AuthorWhereUniqueInput
  }


  /**
   * Author deleteMany
   */
  export type AuthorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Authors to delete
     */
    where?: AuthorWhereInput
  }


  /**
   * Author.Source_Authorship
   */
  export type Author$Source_AuthorshipArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    where?: Source_AuthorshipWhereInput
    orderBy?: Source_AuthorshipOrderByWithRelationInput | Source_AuthorshipOrderByWithRelationInput[]
    cursor?: Source_AuthorshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Source_AuthorshipScalarFieldEnum | Source_AuthorshipScalarFieldEnum[]
  }


  /**
   * Author without action
   */
  export type AuthorDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
  }



  /**
   * Model Term_Discipline_Definition
   */

  export type AggregateTerm_Discipline_Definition = {
    _count: Term_Discipline_DefinitionCountAggregateOutputType | null
    _min: Term_Discipline_DefinitionMinAggregateOutputType | null
    _max: Term_Discipline_DefinitionMaxAggregateOutputType | null
  }

  export type Term_Discipline_DefinitionMinAggregateOutputType = {
    Id: string | null
    disciplineId: string | null
    termId: string | null
    definitionId: string | null
  }

  export type Term_Discipline_DefinitionMaxAggregateOutputType = {
    Id: string | null
    disciplineId: string | null
    termId: string | null
    definitionId: string | null
  }

  export type Term_Discipline_DefinitionCountAggregateOutputType = {
    Id: number
    disciplineId: number
    termId: number
    definitionId: number
    _all: number
  }


  export type Term_Discipline_DefinitionMinAggregateInputType = {
    Id?: true
    disciplineId?: true
    termId?: true
    definitionId?: true
  }

  export type Term_Discipline_DefinitionMaxAggregateInputType = {
    Id?: true
    disciplineId?: true
    termId?: true
    definitionId?: true
  }

  export type Term_Discipline_DefinitionCountAggregateInputType = {
    Id?: true
    disciplineId?: true
    termId?: true
    definitionId?: true
    _all?: true
  }

  export type Term_Discipline_DefinitionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Term_Discipline_Definition to aggregate.
     */
    where?: Term_Discipline_DefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Term_Discipline_Definitions to fetch.
     */
    orderBy?: Term_Discipline_DefinitionOrderByWithRelationInput | Term_Discipline_DefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Term_Discipline_DefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Term_Discipline_Definitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Term_Discipline_Definitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Term_Discipline_Definitions
    **/
    _count?: true | Term_Discipline_DefinitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Term_Discipline_DefinitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Term_Discipline_DefinitionMaxAggregateInputType
  }

  export type GetTerm_Discipline_DefinitionAggregateType<T extends Term_Discipline_DefinitionAggregateArgs> = {
        [P in keyof T & keyof AggregateTerm_Discipline_Definition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerm_Discipline_Definition[P]>
      : GetScalarType<T[P], AggregateTerm_Discipline_Definition[P]>
  }




  export type Term_Discipline_DefinitionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Term_Discipline_DefinitionWhereInput
    orderBy?: Term_Discipline_DefinitionOrderByWithAggregationInput | Term_Discipline_DefinitionOrderByWithAggregationInput[]
    by: Term_Discipline_DefinitionScalarFieldEnum[] | Term_Discipline_DefinitionScalarFieldEnum
    having?: Term_Discipline_DefinitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Term_Discipline_DefinitionCountAggregateInputType | true
    _min?: Term_Discipline_DefinitionMinAggregateInputType
    _max?: Term_Discipline_DefinitionMaxAggregateInputType
  }

  export type Term_Discipline_DefinitionGroupByOutputType = {
    Id: string
    disciplineId: string
    termId: string
    definitionId: string | null
    _count: Term_Discipline_DefinitionCountAggregateOutputType | null
    _min: Term_Discipline_DefinitionMinAggregateOutputType | null
    _max: Term_Discipline_DefinitionMaxAggregateOutputType | null
  }

  type GetTerm_Discipline_DefinitionGroupByPayload<T extends Term_Discipline_DefinitionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Term_Discipline_DefinitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Term_Discipline_DefinitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Term_Discipline_DefinitionGroupByOutputType[P]>
            : GetScalarType<T[P], Term_Discipline_DefinitionGroupByOutputType[P]>
        }
      >
    >


  export type Term_Discipline_DefinitionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    disciplineId?: boolean
    termId?: boolean
    definitionId?: boolean
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    definition?: boolean | Term_Discipline_Definition$definitionArgs<ExtArgs>
    term?: boolean | TermDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["term_Discipline_Definition"]>

  export type Term_Discipline_DefinitionSelectScalar = {
    Id?: boolean
    disciplineId?: boolean
    termId?: boolean
    definitionId?: boolean
  }

  export type Term_Discipline_DefinitionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    definition?: boolean | Term_Discipline_Definition$definitionArgs<ExtArgs>
    term?: boolean | TermDefaultArgs<ExtArgs>
  }


  export type $Term_Discipline_DefinitionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Term_Discipline_Definition"
    objects: {
      discipline: Prisma.$DisciplinePayload<ExtArgs>
      definition: Prisma.$DefinitionPayload<ExtArgs> | null
      term: Prisma.$TermPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      Id: string
      disciplineId: string
      termId: string
      definitionId: string | null
    }, ExtArgs["result"]["term_Discipline_Definition"]>
    composites: {}
  }


  type Term_Discipline_DefinitionGetPayload<S extends boolean | null | undefined | Term_Discipline_DefinitionDefaultArgs> = $Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload, S>

  type Term_Discipline_DefinitionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Term_Discipline_DefinitionFindManyArgs, 'select' | 'include'> & {
      select?: Term_Discipline_DefinitionCountAggregateInputType | true
    }

  export interface Term_Discipline_DefinitionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Term_Discipline_Definition'], meta: { name: 'Term_Discipline_Definition' } }
    /**
     * Find zero or one Term_Discipline_Definition that matches the filter.
     * @param {Term_Discipline_DefinitionFindUniqueArgs} args - Arguments to find a Term_Discipline_Definition
     * @example
     * // Get one Term_Discipline_Definition
     * const term_Discipline_Definition = await prisma.term_Discipline_Definition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Term_Discipline_DefinitionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Term_Discipline_DefinitionFindUniqueArgs<ExtArgs>>
    ): Prisma__Term_Discipline_DefinitionClient<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Term_Discipline_Definition that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Term_Discipline_DefinitionFindUniqueOrThrowArgs} args - Arguments to find a Term_Discipline_Definition
     * @example
     * // Get one Term_Discipline_Definition
     * const term_Discipline_Definition = await prisma.term_Discipline_Definition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Term_Discipline_DefinitionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Term_Discipline_DefinitionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Term_Discipline_DefinitionClient<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Term_Discipline_Definition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Term_Discipline_DefinitionFindFirstArgs} args - Arguments to find a Term_Discipline_Definition
     * @example
     * // Get one Term_Discipline_Definition
     * const term_Discipline_Definition = await prisma.term_Discipline_Definition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Term_Discipline_DefinitionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Term_Discipline_DefinitionFindFirstArgs<ExtArgs>>
    ): Prisma__Term_Discipline_DefinitionClient<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Term_Discipline_Definition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Term_Discipline_DefinitionFindFirstOrThrowArgs} args - Arguments to find a Term_Discipline_Definition
     * @example
     * // Get one Term_Discipline_Definition
     * const term_Discipline_Definition = await prisma.term_Discipline_Definition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Term_Discipline_DefinitionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Term_Discipline_DefinitionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Term_Discipline_DefinitionClient<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Term_Discipline_Definitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Term_Discipline_DefinitionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Term_Discipline_Definitions
     * const term_Discipline_Definitions = await prisma.term_Discipline_Definition.findMany()
     * 
     * // Get first 10 Term_Discipline_Definitions
     * const term_Discipline_Definitions = await prisma.term_Discipline_Definition.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const term_Discipline_DefinitionWithIdOnly = await prisma.term_Discipline_Definition.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends Term_Discipline_DefinitionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Term_Discipline_DefinitionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Term_Discipline_Definition.
     * @param {Term_Discipline_DefinitionCreateArgs} args - Arguments to create a Term_Discipline_Definition.
     * @example
     * // Create one Term_Discipline_Definition
     * const Term_Discipline_Definition = await prisma.term_Discipline_Definition.create({
     *   data: {
     *     // ... data to create a Term_Discipline_Definition
     *   }
     * })
     * 
    **/
    create<T extends Term_Discipline_DefinitionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Term_Discipline_DefinitionCreateArgs<ExtArgs>>
    ): Prisma__Term_Discipline_DefinitionClient<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Term_Discipline_Definition.
     * @param {Term_Discipline_DefinitionDeleteArgs} args - Arguments to delete one Term_Discipline_Definition.
     * @example
     * // Delete one Term_Discipline_Definition
     * const Term_Discipline_Definition = await prisma.term_Discipline_Definition.delete({
     *   where: {
     *     // ... filter to delete one Term_Discipline_Definition
     *   }
     * })
     * 
    **/
    delete<T extends Term_Discipline_DefinitionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Term_Discipline_DefinitionDeleteArgs<ExtArgs>>
    ): Prisma__Term_Discipline_DefinitionClient<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Term_Discipline_Definition.
     * @param {Term_Discipline_DefinitionUpdateArgs} args - Arguments to update one Term_Discipline_Definition.
     * @example
     * // Update one Term_Discipline_Definition
     * const term_Discipline_Definition = await prisma.term_Discipline_Definition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Term_Discipline_DefinitionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Term_Discipline_DefinitionUpdateArgs<ExtArgs>>
    ): Prisma__Term_Discipline_DefinitionClient<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Term_Discipline_Definitions.
     * @param {Term_Discipline_DefinitionDeleteManyArgs} args - Arguments to filter Term_Discipline_Definitions to delete.
     * @example
     * // Delete a few Term_Discipline_Definitions
     * const { count } = await prisma.term_Discipline_Definition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Term_Discipline_DefinitionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Term_Discipline_DefinitionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Term_Discipline_Definitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Term_Discipline_DefinitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Term_Discipline_Definitions
     * const term_Discipline_Definition = await prisma.term_Discipline_Definition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Term_Discipline_DefinitionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Term_Discipline_DefinitionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Term_Discipline_Definition.
     * @param {Term_Discipline_DefinitionUpsertArgs} args - Arguments to update or create a Term_Discipline_Definition.
     * @example
     * // Update or create a Term_Discipline_Definition
     * const term_Discipline_Definition = await prisma.term_Discipline_Definition.upsert({
     *   create: {
     *     // ... data to create a Term_Discipline_Definition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Term_Discipline_Definition we want to update
     *   }
     * })
    **/
    upsert<T extends Term_Discipline_DefinitionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Term_Discipline_DefinitionUpsertArgs<ExtArgs>>
    ): Prisma__Term_Discipline_DefinitionClient<$Result.GetResult<Prisma.$Term_Discipline_DefinitionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Term_Discipline_Definitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Term_Discipline_DefinitionCountArgs} args - Arguments to filter Term_Discipline_Definitions to count.
     * @example
     * // Count the number of Term_Discipline_Definitions
     * const count = await prisma.term_Discipline_Definition.count({
     *   where: {
     *     // ... the filter for the Term_Discipline_Definitions we want to count
     *   }
     * })
    **/
    count<T extends Term_Discipline_DefinitionCountArgs>(
      args?: Subset<T, Term_Discipline_DefinitionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Term_Discipline_DefinitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Term_Discipline_Definition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Term_Discipline_DefinitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Term_Discipline_DefinitionAggregateArgs>(args: Subset<T, Term_Discipline_DefinitionAggregateArgs>): Prisma.PrismaPromise<GetTerm_Discipline_DefinitionAggregateType<T>>

    /**
     * Group by Term_Discipline_Definition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Term_Discipline_DefinitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Term_Discipline_DefinitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Term_Discipline_DefinitionGroupByArgs['orderBy'] }
        : { orderBy?: Term_Discipline_DefinitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Term_Discipline_DefinitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerm_Discipline_DefinitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Term_Discipline_Definition model
   */
  readonly fields: Term_Discipline_DefinitionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Term_Discipline_Definition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Term_Discipline_DefinitionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    discipline<T extends DisciplineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisciplineDefaultArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    definition<T extends Term_Discipline_Definition$definitionArgs<ExtArgs> = {}>(args?: Subset<T, Term_Discipline_Definition$definitionArgs<ExtArgs>>): Prisma__DefinitionClient<$Result.GetResult<Prisma.$DefinitionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    term<T extends TermDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TermDefaultArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Term_Discipline_Definition model
   */ 
  interface Term_Discipline_DefinitionFieldRefs {
    readonly Id: FieldRef<"Term_Discipline_Definition", 'String'>
    readonly disciplineId: FieldRef<"Term_Discipline_Definition", 'String'>
    readonly termId: FieldRef<"Term_Discipline_Definition", 'String'>
    readonly definitionId: FieldRef<"Term_Discipline_Definition", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Term_Discipline_Definition findUnique
   */
  export type Term_Discipline_DefinitionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Term_Discipline_Definition to fetch.
     */
    where: Term_Discipline_DefinitionWhereUniqueInput
  }


  /**
   * Term_Discipline_Definition findUniqueOrThrow
   */
  export type Term_Discipline_DefinitionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Term_Discipline_Definition to fetch.
     */
    where: Term_Discipline_DefinitionWhereUniqueInput
  }


  /**
   * Term_Discipline_Definition findFirst
   */
  export type Term_Discipline_DefinitionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Term_Discipline_Definition to fetch.
     */
    where?: Term_Discipline_DefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Term_Discipline_Definitions to fetch.
     */
    orderBy?: Term_Discipline_DefinitionOrderByWithRelationInput | Term_Discipline_DefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Term_Discipline_Definitions.
     */
    cursor?: Term_Discipline_DefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Term_Discipline_Definitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Term_Discipline_Definitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Term_Discipline_Definitions.
     */
    distinct?: Term_Discipline_DefinitionScalarFieldEnum | Term_Discipline_DefinitionScalarFieldEnum[]
  }


  /**
   * Term_Discipline_Definition findFirstOrThrow
   */
  export type Term_Discipline_DefinitionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Term_Discipline_Definition to fetch.
     */
    where?: Term_Discipline_DefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Term_Discipline_Definitions to fetch.
     */
    orderBy?: Term_Discipline_DefinitionOrderByWithRelationInput | Term_Discipline_DefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Term_Discipline_Definitions.
     */
    cursor?: Term_Discipline_DefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Term_Discipline_Definitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Term_Discipline_Definitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Term_Discipline_Definitions.
     */
    distinct?: Term_Discipline_DefinitionScalarFieldEnum | Term_Discipline_DefinitionScalarFieldEnum[]
  }


  /**
   * Term_Discipline_Definition findMany
   */
  export type Term_Discipline_DefinitionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * Filter, which Term_Discipline_Definitions to fetch.
     */
    where?: Term_Discipline_DefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Term_Discipline_Definitions to fetch.
     */
    orderBy?: Term_Discipline_DefinitionOrderByWithRelationInput | Term_Discipline_DefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Term_Discipline_Definitions.
     */
    cursor?: Term_Discipline_DefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Term_Discipline_Definitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Term_Discipline_Definitions.
     */
    skip?: number
    distinct?: Term_Discipline_DefinitionScalarFieldEnum | Term_Discipline_DefinitionScalarFieldEnum[]
  }


  /**
   * Term_Discipline_Definition create
   */
  export type Term_Discipline_DefinitionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * The data needed to create a Term_Discipline_Definition.
     */
    data: XOR<Term_Discipline_DefinitionCreateInput, Term_Discipline_DefinitionUncheckedCreateInput>
  }


  /**
   * Term_Discipline_Definition update
   */
  export type Term_Discipline_DefinitionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * The data needed to update a Term_Discipline_Definition.
     */
    data: XOR<Term_Discipline_DefinitionUpdateInput, Term_Discipline_DefinitionUncheckedUpdateInput>
    /**
     * Choose, which Term_Discipline_Definition to update.
     */
    where: Term_Discipline_DefinitionWhereUniqueInput
  }


  /**
   * Term_Discipline_Definition updateMany
   */
  export type Term_Discipline_DefinitionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Term_Discipline_Definitions.
     */
    data: XOR<Term_Discipline_DefinitionUpdateManyMutationInput, Term_Discipline_DefinitionUncheckedUpdateManyInput>
    /**
     * Filter which Term_Discipline_Definitions to update
     */
    where?: Term_Discipline_DefinitionWhereInput
  }


  /**
   * Term_Discipline_Definition upsert
   */
  export type Term_Discipline_DefinitionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * The filter to search for the Term_Discipline_Definition to update in case it exists.
     */
    where: Term_Discipline_DefinitionWhereUniqueInput
    /**
     * In case the Term_Discipline_Definition found by the `where` argument doesn't exist, create a new Term_Discipline_Definition with this data.
     */
    create: XOR<Term_Discipline_DefinitionCreateInput, Term_Discipline_DefinitionUncheckedCreateInput>
    /**
     * In case the Term_Discipline_Definition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Term_Discipline_DefinitionUpdateInput, Term_Discipline_DefinitionUncheckedUpdateInput>
  }


  /**
   * Term_Discipline_Definition delete
   */
  export type Term_Discipline_DefinitionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
    /**
     * Filter which Term_Discipline_Definition to delete.
     */
    where: Term_Discipline_DefinitionWhereUniqueInput
  }


  /**
   * Term_Discipline_Definition deleteMany
   */
  export type Term_Discipline_DefinitionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Term_Discipline_Definitions to delete
     */
    where?: Term_Discipline_DefinitionWhereInput
  }


  /**
   * Term_Discipline_Definition.definition
   */
  export type Term_Discipline_Definition$definitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Definition
     */
    select?: DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DefinitionInclude<ExtArgs> | null
    where?: DefinitionWhereInput
  }


  /**
   * Term_Discipline_Definition without action
   */
  export type Term_Discipline_DefinitionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term_Discipline_Definition
     */
    select?: Term_Discipline_DefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Term_Discipline_DefinitionInclude<ExtArgs> | null
  }



  /**
   * Model Source_Authorship
   */

  export type AggregateSource_Authorship = {
    _count: Source_AuthorshipCountAggregateOutputType | null
    _min: Source_AuthorshipMinAggregateOutputType | null
    _max: Source_AuthorshipMaxAggregateOutputType | null
  }

  export type Source_AuthorshipMinAggregateOutputType = {
    Id: string | null
    sourceId: string | null
    authorId: string | null
  }

  export type Source_AuthorshipMaxAggregateOutputType = {
    Id: string | null
    sourceId: string | null
    authorId: string | null
  }

  export type Source_AuthorshipCountAggregateOutputType = {
    Id: number
    sourceId: number
    authorId: number
    _all: number
  }


  export type Source_AuthorshipMinAggregateInputType = {
    Id?: true
    sourceId?: true
    authorId?: true
  }

  export type Source_AuthorshipMaxAggregateInputType = {
    Id?: true
    sourceId?: true
    authorId?: true
  }

  export type Source_AuthorshipCountAggregateInputType = {
    Id?: true
    sourceId?: true
    authorId?: true
    _all?: true
  }

  export type Source_AuthorshipAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Source_Authorship to aggregate.
     */
    where?: Source_AuthorshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Source_Authorships to fetch.
     */
    orderBy?: Source_AuthorshipOrderByWithRelationInput | Source_AuthorshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Source_AuthorshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Source_Authorships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Source_Authorships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Source_Authorships
    **/
    _count?: true | Source_AuthorshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Source_AuthorshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Source_AuthorshipMaxAggregateInputType
  }

  export type GetSource_AuthorshipAggregateType<T extends Source_AuthorshipAggregateArgs> = {
        [P in keyof T & keyof AggregateSource_Authorship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSource_Authorship[P]>
      : GetScalarType<T[P], AggregateSource_Authorship[P]>
  }




  export type Source_AuthorshipGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Source_AuthorshipWhereInput
    orderBy?: Source_AuthorshipOrderByWithAggregationInput | Source_AuthorshipOrderByWithAggregationInput[]
    by: Source_AuthorshipScalarFieldEnum[] | Source_AuthorshipScalarFieldEnum
    having?: Source_AuthorshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Source_AuthorshipCountAggregateInputType | true
    _min?: Source_AuthorshipMinAggregateInputType
    _max?: Source_AuthorshipMaxAggregateInputType
  }

  export type Source_AuthorshipGroupByOutputType = {
    Id: string
    sourceId: string
    authorId: string | null
    _count: Source_AuthorshipCountAggregateOutputType | null
    _min: Source_AuthorshipMinAggregateOutputType | null
    _max: Source_AuthorshipMaxAggregateOutputType | null
  }

  type GetSource_AuthorshipGroupByPayload<T extends Source_AuthorshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Source_AuthorshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Source_AuthorshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Source_AuthorshipGroupByOutputType[P]>
            : GetScalarType<T[P], Source_AuthorshipGroupByOutputType[P]>
        }
      >
    >


  export type Source_AuthorshipSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    sourceId?: boolean
    authorId?: boolean
    author?: boolean | Source_Authorship$authorArgs<ExtArgs>
    source?: boolean | SourceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["source_Authorship"]>

  export type Source_AuthorshipSelectScalar = {
    Id?: boolean
    sourceId?: boolean
    authorId?: boolean
  }

  export type Source_AuthorshipInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    author?: boolean | Source_Authorship$authorArgs<ExtArgs>
    source?: boolean | SourceDefaultArgs<ExtArgs>
  }


  export type $Source_AuthorshipPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Source_Authorship"
    objects: {
      author: Prisma.$AuthorPayload<ExtArgs> | null
      source: Prisma.$SourcePayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      Id: string
      sourceId: string
      authorId: string | null
    }, ExtArgs["result"]["source_Authorship"]>
    composites: {}
  }


  type Source_AuthorshipGetPayload<S extends boolean | null | undefined | Source_AuthorshipDefaultArgs> = $Result.GetResult<Prisma.$Source_AuthorshipPayload, S>

  type Source_AuthorshipCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Source_AuthorshipFindManyArgs, 'select' | 'include'> & {
      select?: Source_AuthorshipCountAggregateInputType | true
    }

  export interface Source_AuthorshipDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Source_Authorship'], meta: { name: 'Source_Authorship' } }
    /**
     * Find zero or one Source_Authorship that matches the filter.
     * @param {Source_AuthorshipFindUniqueArgs} args - Arguments to find a Source_Authorship
     * @example
     * // Get one Source_Authorship
     * const source_Authorship = await prisma.source_Authorship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Source_AuthorshipFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Source_AuthorshipFindUniqueArgs<ExtArgs>>
    ): Prisma__Source_AuthorshipClient<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Source_Authorship that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Source_AuthorshipFindUniqueOrThrowArgs} args - Arguments to find a Source_Authorship
     * @example
     * // Get one Source_Authorship
     * const source_Authorship = await prisma.source_Authorship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Source_AuthorshipFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Source_AuthorshipFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Source_AuthorshipClient<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Source_Authorship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Source_AuthorshipFindFirstArgs} args - Arguments to find a Source_Authorship
     * @example
     * // Get one Source_Authorship
     * const source_Authorship = await prisma.source_Authorship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Source_AuthorshipFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Source_AuthorshipFindFirstArgs<ExtArgs>>
    ): Prisma__Source_AuthorshipClient<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Source_Authorship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Source_AuthorshipFindFirstOrThrowArgs} args - Arguments to find a Source_Authorship
     * @example
     * // Get one Source_Authorship
     * const source_Authorship = await prisma.source_Authorship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Source_AuthorshipFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Source_AuthorshipFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Source_AuthorshipClient<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Source_Authorships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Source_AuthorshipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Source_Authorships
     * const source_Authorships = await prisma.source_Authorship.findMany()
     * 
     * // Get first 10 Source_Authorships
     * const source_Authorships = await prisma.source_Authorship.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const source_AuthorshipWithIdOnly = await prisma.source_Authorship.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends Source_AuthorshipFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Source_AuthorshipFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Source_Authorship.
     * @param {Source_AuthorshipCreateArgs} args - Arguments to create a Source_Authorship.
     * @example
     * // Create one Source_Authorship
     * const Source_Authorship = await prisma.source_Authorship.create({
     *   data: {
     *     // ... data to create a Source_Authorship
     *   }
     * })
     * 
    **/
    create<T extends Source_AuthorshipCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Source_AuthorshipCreateArgs<ExtArgs>>
    ): Prisma__Source_AuthorshipClient<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Source_Authorship.
     * @param {Source_AuthorshipDeleteArgs} args - Arguments to delete one Source_Authorship.
     * @example
     * // Delete one Source_Authorship
     * const Source_Authorship = await prisma.source_Authorship.delete({
     *   where: {
     *     // ... filter to delete one Source_Authorship
     *   }
     * })
     * 
    **/
    delete<T extends Source_AuthorshipDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Source_AuthorshipDeleteArgs<ExtArgs>>
    ): Prisma__Source_AuthorshipClient<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Source_Authorship.
     * @param {Source_AuthorshipUpdateArgs} args - Arguments to update one Source_Authorship.
     * @example
     * // Update one Source_Authorship
     * const source_Authorship = await prisma.source_Authorship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Source_AuthorshipUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Source_AuthorshipUpdateArgs<ExtArgs>>
    ): Prisma__Source_AuthorshipClient<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Source_Authorships.
     * @param {Source_AuthorshipDeleteManyArgs} args - Arguments to filter Source_Authorships to delete.
     * @example
     * // Delete a few Source_Authorships
     * const { count } = await prisma.source_Authorship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Source_AuthorshipDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Source_AuthorshipDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Source_Authorships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Source_AuthorshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Source_Authorships
     * const source_Authorship = await prisma.source_Authorship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Source_AuthorshipUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Source_AuthorshipUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Source_Authorship.
     * @param {Source_AuthorshipUpsertArgs} args - Arguments to update or create a Source_Authorship.
     * @example
     * // Update or create a Source_Authorship
     * const source_Authorship = await prisma.source_Authorship.upsert({
     *   create: {
     *     // ... data to create a Source_Authorship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Source_Authorship we want to update
     *   }
     * })
    **/
    upsert<T extends Source_AuthorshipUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Source_AuthorshipUpsertArgs<ExtArgs>>
    ): Prisma__Source_AuthorshipClient<$Result.GetResult<Prisma.$Source_AuthorshipPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Source_Authorships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Source_AuthorshipCountArgs} args - Arguments to filter Source_Authorships to count.
     * @example
     * // Count the number of Source_Authorships
     * const count = await prisma.source_Authorship.count({
     *   where: {
     *     // ... the filter for the Source_Authorships we want to count
     *   }
     * })
    **/
    count<T extends Source_AuthorshipCountArgs>(
      args?: Subset<T, Source_AuthorshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Source_AuthorshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Source_Authorship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Source_AuthorshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Source_AuthorshipAggregateArgs>(args: Subset<T, Source_AuthorshipAggregateArgs>): Prisma.PrismaPromise<GetSource_AuthorshipAggregateType<T>>

    /**
     * Group by Source_Authorship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Source_AuthorshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Source_AuthorshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Source_AuthorshipGroupByArgs['orderBy'] }
        : { orderBy?: Source_AuthorshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Source_AuthorshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSource_AuthorshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Source_Authorship model
   */
  readonly fields: Source_AuthorshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Source_Authorship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Source_AuthorshipClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    author<T extends Source_Authorship$authorArgs<ExtArgs> = {}>(args?: Subset<T, Source_Authorship$authorArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    source<T extends SourceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SourceDefaultArgs<ExtArgs>>): Prisma__SourceClient<$Result.GetResult<Prisma.$SourcePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Source_Authorship model
   */ 
  interface Source_AuthorshipFieldRefs {
    readonly Id: FieldRef<"Source_Authorship", 'String'>
    readonly sourceId: FieldRef<"Source_Authorship", 'String'>
    readonly authorId: FieldRef<"Source_Authorship", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Source_Authorship findUnique
   */
  export type Source_AuthorshipFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * Filter, which Source_Authorship to fetch.
     */
    where: Source_AuthorshipWhereUniqueInput
  }


  /**
   * Source_Authorship findUniqueOrThrow
   */
  export type Source_AuthorshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * Filter, which Source_Authorship to fetch.
     */
    where: Source_AuthorshipWhereUniqueInput
  }


  /**
   * Source_Authorship findFirst
   */
  export type Source_AuthorshipFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * Filter, which Source_Authorship to fetch.
     */
    where?: Source_AuthorshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Source_Authorships to fetch.
     */
    orderBy?: Source_AuthorshipOrderByWithRelationInput | Source_AuthorshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Source_Authorships.
     */
    cursor?: Source_AuthorshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Source_Authorships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Source_Authorships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Source_Authorships.
     */
    distinct?: Source_AuthorshipScalarFieldEnum | Source_AuthorshipScalarFieldEnum[]
  }


  /**
   * Source_Authorship findFirstOrThrow
   */
  export type Source_AuthorshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * Filter, which Source_Authorship to fetch.
     */
    where?: Source_AuthorshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Source_Authorships to fetch.
     */
    orderBy?: Source_AuthorshipOrderByWithRelationInput | Source_AuthorshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Source_Authorships.
     */
    cursor?: Source_AuthorshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Source_Authorships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Source_Authorships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Source_Authorships.
     */
    distinct?: Source_AuthorshipScalarFieldEnum | Source_AuthorshipScalarFieldEnum[]
  }


  /**
   * Source_Authorship findMany
   */
  export type Source_AuthorshipFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * Filter, which Source_Authorships to fetch.
     */
    where?: Source_AuthorshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Source_Authorships to fetch.
     */
    orderBy?: Source_AuthorshipOrderByWithRelationInput | Source_AuthorshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Source_Authorships.
     */
    cursor?: Source_AuthorshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Source_Authorships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Source_Authorships.
     */
    skip?: number
    distinct?: Source_AuthorshipScalarFieldEnum | Source_AuthorshipScalarFieldEnum[]
  }


  /**
   * Source_Authorship create
   */
  export type Source_AuthorshipCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * The data needed to create a Source_Authorship.
     */
    data: XOR<Source_AuthorshipCreateInput, Source_AuthorshipUncheckedCreateInput>
  }


  /**
   * Source_Authorship update
   */
  export type Source_AuthorshipUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * The data needed to update a Source_Authorship.
     */
    data: XOR<Source_AuthorshipUpdateInput, Source_AuthorshipUncheckedUpdateInput>
    /**
     * Choose, which Source_Authorship to update.
     */
    where: Source_AuthorshipWhereUniqueInput
  }


  /**
   * Source_Authorship updateMany
   */
  export type Source_AuthorshipUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Source_Authorships.
     */
    data: XOR<Source_AuthorshipUpdateManyMutationInput, Source_AuthorshipUncheckedUpdateManyInput>
    /**
     * Filter which Source_Authorships to update
     */
    where?: Source_AuthorshipWhereInput
  }


  /**
   * Source_Authorship upsert
   */
  export type Source_AuthorshipUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * The filter to search for the Source_Authorship to update in case it exists.
     */
    where: Source_AuthorshipWhereUniqueInput
    /**
     * In case the Source_Authorship found by the `where` argument doesn't exist, create a new Source_Authorship with this data.
     */
    create: XOR<Source_AuthorshipCreateInput, Source_AuthorshipUncheckedCreateInput>
    /**
     * In case the Source_Authorship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Source_AuthorshipUpdateInput, Source_AuthorshipUncheckedUpdateInput>
  }


  /**
   * Source_Authorship delete
   */
  export type Source_AuthorshipDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
    /**
     * Filter which Source_Authorship to delete.
     */
    where: Source_AuthorshipWhereUniqueInput
  }


  /**
   * Source_Authorship deleteMany
   */
  export type Source_AuthorshipDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Source_Authorships to delete
     */
    where?: Source_AuthorshipWhereInput
  }


  /**
   * Source_Authorship.author
   */
  export type Source_Authorship$authorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuthorInclude<ExtArgs> | null
    where?: AuthorWhereInput
  }


  /**
   * Source_Authorship without action
   */
  export type Source_AuthorshipDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Source_Authorship
     */
    select?: Source_AuthorshipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Source_AuthorshipInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    prontuario: 'prontuario',
    name: 'name',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const GlossaryScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    name: 'name',
    description: 'description'
  };

  export type GlossaryScalarFieldEnum = (typeof GlossaryScalarFieldEnum)[keyof typeof GlossaryScalarFieldEnum]


  export const DisciplineScalarFieldEnum: {
    id: 'id',
    glossaryId: 'glossaryId',
    name: 'name',
    description: 'description',
    year: 'year'
  };

  export type DisciplineScalarFieldEnum = (typeof DisciplineScalarFieldEnum)[keyof typeof DisciplineScalarFieldEnum]


  export const TermScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TermScalarFieldEnum = (typeof TermScalarFieldEnum)[keyof typeof TermScalarFieldEnum]


  export const DefinitionScalarFieldEnum: {
    id: 'id',
    sourceId: 'sourceId',
    description: 'description',
    page: 'page'
  };

  export type DefinitionScalarFieldEnum = (typeof DefinitionScalarFieldEnum)[keyof typeof DefinitionScalarFieldEnum]


  export const TranslationScalarFieldEnum: {
    translationId: 'translationId',
    termId: 'termId',
    sourceId: 'sourceId',
    language: 'language',
    translation: 'translation',
    page: 'page'
  };

  export type TranslationScalarFieldEnum = (typeof TranslationScalarFieldEnum)[keyof typeof TranslationScalarFieldEnum]


  export const SourceScalarFieldEnum: {
    sourceId: 'sourceId',
    title: 'title',
    publisher: 'publisher',
    year: 'year',
    type_publication: 'type_publication'
  };

  export type SourceScalarFieldEnum = (typeof SourceScalarFieldEnum)[keyof typeof SourceScalarFieldEnum]


  export const AuthorScalarFieldEnum: {
    authorId: 'authorId',
    name: 'name'
  };

  export type AuthorScalarFieldEnum = (typeof AuthorScalarFieldEnum)[keyof typeof AuthorScalarFieldEnum]


  export const Term_Discipline_DefinitionScalarFieldEnum: {
    Id: 'Id',
    disciplineId: 'disciplineId',
    termId: 'termId',
    definitionId: 'definitionId'
  };

  export type Term_Discipline_DefinitionScalarFieldEnum = (typeof Term_Discipline_DefinitionScalarFieldEnum)[keyof typeof Term_Discipline_DefinitionScalarFieldEnum]


  export const Source_AuthorshipScalarFieldEnum: {
    Id: 'Id',
    sourceId: 'sourceId',
    authorId: 'authorId'
  };

  export type Source_AuthorshipScalarFieldEnum = (typeof Source_AuthorshipScalarFieldEnum)[keyof typeof Source_AuthorshipScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    prontuario?: StringFilter<"Users"> | string
    name?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
  }

  export type UsersOrderByWithRelationInput = {
    prontuario?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    prontuario?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    name?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
  }, "prontuario">

  export type UsersOrderByWithAggregationInput = {
    prontuario?: SortOrder
    name?: SortOrder
    password?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    prontuario?: StringWithAggregatesFilter<"Users"> | string
    name?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: StringFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    description?: StringNullableFilter<"Course"> | string | null
    glossary?: GlossaryListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    glossary?: GlossaryOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    name?: StringFilter<"Course"> | string
    description?: StringNullableFilter<"Course"> | string | null
    glossary?: GlossaryListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: CourseCountOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Course"> | string
    name?: StringWithAggregatesFilter<"Course"> | string
    description?: StringNullableWithAggregatesFilter<"Course"> | string | null
  }

  export type GlossaryWhereInput = {
    AND?: GlossaryWhereInput | GlossaryWhereInput[]
    OR?: GlossaryWhereInput[]
    NOT?: GlossaryWhereInput | GlossaryWhereInput[]
    id?: StringFilter<"Glossary"> | string
    courseId?: StringFilter<"Glossary"> | string
    name?: StringFilter<"Glossary"> | string
    description?: StringNullableFilter<"Glossary"> | string | null
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    Discipline?: DisciplineListRelationFilter
  }

  export type GlossaryOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    course?: CourseOrderByWithRelationInput
    Discipline?: DisciplineOrderByRelationAggregateInput
  }

  export type GlossaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GlossaryWhereInput | GlossaryWhereInput[]
    OR?: GlossaryWhereInput[]
    NOT?: GlossaryWhereInput | GlossaryWhereInput[]
    courseId?: StringFilter<"Glossary"> | string
    name?: StringFilter<"Glossary"> | string
    description?: StringNullableFilter<"Glossary"> | string | null
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    Discipline?: DisciplineListRelationFilter
  }, "id">

  export type GlossaryOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: GlossaryCountOrderByAggregateInput
    _max?: GlossaryMaxOrderByAggregateInput
    _min?: GlossaryMinOrderByAggregateInput
  }

  export type GlossaryScalarWhereWithAggregatesInput = {
    AND?: GlossaryScalarWhereWithAggregatesInput | GlossaryScalarWhereWithAggregatesInput[]
    OR?: GlossaryScalarWhereWithAggregatesInput[]
    NOT?: GlossaryScalarWhereWithAggregatesInput | GlossaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Glossary"> | string
    courseId?: StringWithAggregatesFilter<"Glossary"> | string
    name?: StringWithAggregatesFilter<"Glossary"> | string
    description?: StringNullableWithAggregatesFilter<"Glossary"> | string | null
  }

  export type DisciplineWhereInput = {
    AND?: DisciplineWhereInput | DisciplineWhereInput[]
    OR?: DisciplineWhereInput[]
    NOT?: DisciplineWhereInput | DisciplineWhereInput[]
    id?: StringFilter<"Discipline"> | string
    glossaryId?: StringFilter<"Discipline"> | string
    name?: StringFilter<"Discipline"> | string
    description?: StringNullableFilter<"Discipline"> | string | null
    year?: StringNullableFilter<"Discipline"> | string | null
    glossary?: XOR<GlossaryRelationFilter, GlossaryWhereInput>
    Term_Discipline_Definition?: Term_Discipline_DefinitionListRelationFilter
  }

  export type DisciplineOrderByWithRelationInput = {
    id?: SortOrder
    glossaryId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    glossary?: GlossaryOrderByWithRelationInput
    Term_Discipline_Definition?: Term_Discipline_DefinitionOrderByRelationAggregateInput
  }

  export type DisciplineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DisciplineWhereInput | DisciplineWhereInput[]
    OR?: DisciplineWhereInput[]
    NOT?: DisciplineWhereInput | DisciplineWhereInput[]
    glossaryId?: StringFilter<"Discipline"> | string
    name?: StringFilter<"Discipline"> | string
    description?: StringNullableFilter<"Discipline"> | string | null
    year?: StringNullableFilter<"Discipline"> | string | null
    glossary?: XOR<GlossaryRelationFilter, GlossaryWhereInput>
    Term_Discipline_Definition?: Term_Discipline_DefinitionListRelationFilter
  }, "id">

  export type DisciplineOrderByWithAggregationInput = {
    id?: SortOrder
    glossaryId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    _count?: DisciplineCountOrderByAggregateInput
    _max?: DisciplineMaxOrderByAggregateInput
    _min?: DisciplineMinOrderByAggregateInput
  }

  export type DisciplineScalarWhereWithAggregatesInput = {
    AND?: DisciplineScalarWhereWithAggregatesInput | DisciplineScalarWhereWithAggregatesInput[]
    OR?: DisciplineScalarWhereWithAggregatesInput[]
    NOT?: DisciplineScalarWhereWithAggregatesInput | DisciplineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Discipline"> | string
    glossaryId?: StringWithAggregatesFilter<"Discipline"> | string
    name?: StringWithAggregatesFilter<"Discipline"> | string
    description?: StringNullableWithAggregatesFilter<"Discipline"> | string | null
    year?: StringNullableWithAggregatesFilter<"Discipline"> | string | null
  }

  export type TermWhereInput = {
    AND?: TermWhereInput | TermWhereInput[]
    OR?: TermWhereInput[]
    NOT?: TermWhereInput | TermWhereInput[]
    id?: StringFilter<"Term"> | string
    name?: StringFilter<"Term"> | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionListRelationFilter
    Translation?: TranslationListRelationFilter
  }

  export type TermOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Term_Discipline_Definition?: Term_Discipline_DefinitionOrderByRelationAggregateInput
    Translation?: TranslationOrderByRelationAggregateInput
  }

  export type TermWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TermWhereInput | TermWhereInput[]
    OR?: TermWhereInput[]
    NOT?: TermWhereInput | TermWhereInput[]
    name?: StringFilter<"Term"> | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionListRelationFilter
    Translation?: TranslationListRelationFilter
  }, "id">

  export type TermOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TermCountOrderByAggregateInput
    _max?: TermMaxOrderByAggregateInput
    _min?: TermMinOrderByAggregateInput
  }

  export type TermScalarWhereWithAggregatesInput = {
    AND?: TermScalarWhereWithAggregatesInput | TermScalarWhereWithAggregatesInput[]
    OR?: TermScalarWhereWithAggregatesInput[]
    NOT?: TermScalarWhereWithAggregatesInput | TermScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Term"> | string
    name?: StringWithAggregatesFilter<"Term"> | string
  }

  export type DefinitionWhereInput = {
    AND?: DefinitionWhereInput | DefinitionWhereInput[]
    OR?: DefinitionWhereInput[]
    NOT?: DefinitionWhereInput | DefinitionWhereInput[]
    id?: StringFilter<"Definition"> | string
    sourceId?: StringFilter<"Definition"> | string
    description?: StringNullableFilter<"Definition"> | string | null
    page?: StringFilter<"Definition"> | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionListRelationFilter
    source?: XOR<SourceRelationFilter, SourceWhereInput>
  }

  export type DefinitionOrderByWithRelationInput = {
    id?: SortOrder
    sourceId?: SortOrder
    description?: SortOrderInput | SortOrder
    page?: SortOrder
    Term_Discipline_Definition?: Term_Discipline_DefinitionOrderByRelationAggregateInput
    source?: SourceOrderByWithRelationInput
  }

  export type DefinitionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    page?: string
    AND?: DefinitionWhereInput | DefinitionWhereInput[]
    OR?: DefinitionWhereInput[]
    NOT?: DefinitionWhereInput | DefinitionWhereInput[]
    sourceId?: StringFilter<"Definition"> | string
    description?: StringNullableFilter<"Definition"> | string | null
    Term_Discipline_Definition?: Term_Discipline_DefinitionListRelationFilter
    source?: XOR<SourceRelationFilter, SourceWhereInput>
  }, "id" | "page">

  export type DefinitionOrderByWithAggregationInput = {
    id?: SortOrder
    sourceId?: SortOrder
    description?: SortOrderInput | SortOrder
    page?: SortOrder
    _count?: DefinitionCountOrderByAggregateInput
    _max?: DefinitionMaxOrderByAggregateInput
    _min?: DefinitionMinOrderByAggregateInput
  }

  export type DefinitionScalarWhereWithAggregatesInput = {
    AND?: DefinitionScalarWhereWithAggregatesInput | DefinitionScalarWhereWithAggregatesInput[]
    OR?: DefinitionScalarWhereWithAggregatesInput[]
    NOT?: DefinitionScalarWhereWithAggregatesInput | DefinitionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Definition"> | string
    sourceId?: StringWithAggregatesFilter<"Definition"> | string
    description?: StringNullableWithAggregatesFilter<"Definition"> | string | null
    page?: StringWithAggregatesFilter<"Definition"> | string
  }

  export type TranslationWhereInput = {
    AND?: TranslationWhereInput | TranslationWhereInput[]
    OR?: TranslationWhereInput[]
    NOT?: TranslationWhereInput | TranslationWhereInput[]
    translationId?: StringFilter<"Translation"> | string
    termId?: StringFilter<"Translation"> | string
    sourceId?: StringFilter<"Translation"> | string
    language?: StringNullableFilter<"Translation"> | string | null
    translation?: StringNullableFilter<"Translation"> | string | null
    page?: StringNullableFilter<"Translation"> | string | null
    source?: XOR<SourceRelationFilter, SourceWhereInput>
    term?: XOR<TermRelationFilter, TermWhereInput>
  }

  export type TranslationOrderByWithRelationInput = {
    translationId?: SortOrder
    termId?: SortOrder
    sourceId?: SortOrder
    language?: SortOrderInput | SortOrder
    translation?: SortOrderInput | SortOrder
    page?: SortOrderInput | SortOrder
    source?: SourceOrderByWithRelationInput
    term?: TermOrderByWithRelationInput
  }

  export type TranslationWhereUniqueInput = Prisma.AtLeast<{
    translationId?: string
    AND?: TranslationWhereInput | TranslationWhereInput[]
    OR?: TranslationWhereInput[]
    NOT?: TranslationWhereInput | TranslationWhereInput[]
    termId?: StringFilter<"Translation"> | string
    sourceId?: StringFilter<"Translation"> | string
    language?: StringNullableFilter<"Translation"> | string | null
    translation?: StringNullableFilter<"Translation"> | string | null
    page?: StringNullableFilter<"Translation"> | string | null
    source?: XOR<SourceRelationFilter, SourceWhereInput>
    term?: XOR<TermRelationFilter, TermWhereInput>
  }, "translationId">

  export type TranslationOrderByWithAggregationInput = {
    translationId?: SortOrder
    termId?: SortOrder
    sourceId?: SortOrder
    language?: SortOrderInput | SortOrder
    translation?: SortOrderInput | SortOrder
    page?: SortOrderInput | SortOrder
    _count?: TranslationCountOrderByAggregateInput
    _max?: TranslationMaxOrderByAggregateInput
    _min?: TranslationMinOrderByAggregateInput
  }

  export type TranslationScalarWhereWithAggregatesInput = {
    AND?: TranslationScalarWhereWithAggregatesInput | TranslationScalarWhereWithAggregatesInput[]
    OR?: TranslationScalarWhereWithAggregatesInput[]
    NOT?: TranslationScalarWhereWithAggregatesInput | TranslationScalarWhereWithAggregatesInput[]
    translationId?: StringWithAggregatesFilter<"Translation"> | string
    termId?: StringWithAggregatesFilter<"Translation"> | string
    sourceId?: StringWithAggregatesFilter<"Translation"> | string
    language?: StringNullableWithAggregatesFilter<"Translation"> | string | null
    translation?: StringNullableWithAggregatesFilter<"Translation"> | string | null
    page?: StringNullableWithAggregatesFilter<"Translation"> | string | null
  }

  export type SourceWhereInput = {
    AND?: SourceWhereInput | SourceWhereInput[]
    OR?: SourceWhereInput[]
    NOT?: SourceWhereInput | SourceWhereInput[]
    sourceId?: StringFilter<"Source"> | string
    title?: StringNullableFilter<"Source"> | string | null
    publisher?: StringNullableFilter<"Source"> | string | null
    year?: StringNullableFilter<"Source"> | string | null
    type_publication?: StringNullableFilter<"Source"> | string | null
    Source_Authorship?: Source_AuthorshipListRelationFilter
    Translation?: TranslationListRelationFilter
    Definition?: DefinitionListRelationFilter
  }

  export type SourceOrderByWithRelationInput = {
    sourceId?: SortOrder
    title?: SortOrderInput | SortOrder
    publisher?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    type_publication?: SortOrderInput | SortOrder
    Source_Authorship?: Source_AuthorshipOrderByRelationAggregateInput
    Translation?: TranslationOrderByRelationAggregateInput
    Definition?: DefinitionOrderByRelationAggregateInput
  }

  export type SourceWhereUniqueInput = Prisma.AtLeast<{
    sourceId?: string
    AND?: SourceWhereInput | SourceWhereInput[]
    OR?: SourceWhereInput[]
    NOT?: SourceWhereInput | SourceWhereInput[]
    title?: StringNullableFilter<"Source"> | string | null
    publisher?: StringNullableFilter<"Source"> | string | null
    year?: StringNullableFilter<"Source"> | string | null
    type_publication?: StringNullableFilter<"Source"> | string | null
    Source_Authorship?: Source_AuthorshipListRelationFilter
    Translation?: TranslationListRelationFilter
    Definition?: DefinitionListRelationFilter
  }, "sourceId">

  export type SourceOrderByWithAggregationInput = {
    sourceId?: SortOrder
    title?: SortOrderInput | SortOrder
    publisher?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    type_publication?: SortOrderInput | SortOrder
    _count?: SourceCountOrderByAggregateInput
    _max?: SourceMaxOrderByAggregateInput
    _min?: SourceMinOrderByAggregateInput
  }

  export type SourceScalarWhereWithAggregatesInput = {
    AND?: SourceScalarWhereWithAggregatesInput | SourceScalarWhereWithAggregatesInput[]
    OR?: SourceScalarWhereWithAggregatesInput[]
    NOT?: SourceScalarWhereWithAggregatesInput | SourceScalarWhereWithAggregatesInput[]
    sourceId?: StringWithAggregatesFilter<"Source"> | string
    title?: StringNullableWithAggregatesFilter<"Source"> | string | null
    publisher?: StringNullableWithAggregatesFilter<"Source"> | string | null
    year?: StringNullableWithAggregatesFilter<"Source"> | string | null
    type_publication?: StringNullableWithAggregatesFilter<"Source"> | string | null
  }

  export type AuthorWhereInput = {
    AND?: AuthorWhereInput | AuthorWhereInput[]
    OR?: AuthorWhereInput[]
    NOT?: AuthorWhereInput | AuthorWhereInput[]
    authorId?: StringFilter<"Author"> | string
    name?: StringNullableFilter<"Author"> | string | null
    Source_Authorship?: Source_AuthorshipListRelationFilter
  }

  export type AuthorOrderByWithRelationInput = {
    authorId?: SortOrder
    name?: SortOrderInput | SortOrder
    Source_Authorship?: Source_AuthorshipOrderByRelationAggregateInput
  }

  export type AuthorWhereUniqueInput = Prisma.AtLeast<{
    authorId?: string
    AND?: AuthorWhereInput | AuthorWhereInput[]
    OR?: AuthorWhereInput[]
    NOT?: AuthorWhereInput | AuthorWhereInput[]
    name?: StringNullableFilter<"Author"> | string | null
    Source_Authorship?: Source_AuthorshipListRelationFilter
  }, "authorId">

  export type AuthorOrderByWithAggregationInput = {
    authorId?: SortOrder
    name?: SortOrderInput | SortOrder
    _count?: AuthorCountOrderByAggregateInput
    _max?: AuthorMaxOrderByAggregateInput
    _min?: AuthorMinOrderByAggregateInput
  }

  export type AuthorScalarWhereWithAggregatesInput = {
    AND?: AuthorScalarWhereWithAggregatesInput | AuthorScalarWhereWithAggregatesInput[]
    OR?: AuthorScalarWhereWithAggregatesInput[]
    NOT?: AuthorScalarWhereWithAggregatesInput | AuthorScalarWhereWithAggregatesInput[]
    authorId?: StringWithAggregatesFilter<"Author"> | string
    name?: StringNullableWithAggregatesFilter<"Author"> | string | null
  }

  export type Term_Discipline_DefinitionWhereInput = {
    AND?: Term_Discipline_DefinitionWhereInput | Term_Discipline_DefinitionWhereInput[]
    OR?: Term_Discipline_DefinitionWhereInput[]
    NOT?: Term_Discipline_DefinitionWhereInput | Term_Discipline_DefinitionWhereInput[]
    Id?: StringFilter<"Term_Discipline_Definition"> | string
    disciplineId?: StringFilter<"Term_Discipline_Definition"> | string
    termId?: StringFilter<"Term_Discipline_Definition"> | string
    definitionId?: StringNullableFilter<"Term_Discipline_Definition"> | string | null
    discipline?: XOR<DisciplineRelationFilter, DisciplineWhereInput>
    definition?: XOR<DefinitionNullableRelationFilter, DefinitionWhereInput> | null
    term?: XOR<TermRelationFilter, TermWhereInput>
  }

  export type Term_Discipline_DefinitionOrderByWithRelationInput = {
    Id?: SortOrder
    disciplineId?: SortOrder
    termId?: SortOrder
    definitionId?: SortOrderInput | SortOrder
    discipline?: DisciplineOrderByWithRelationInput
    definition?: DefinitionOrderByWithRelationInput
    term?: TermOrderByWithRelationInput
  }

  export type Term_Discipline_DefinitionWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: Term_Discipline_DefinitionWhereInput | Term_Discipline_DefinitionWhereInput[]
    OR?: Term_Discipline_DefinitionWhereInput[]
    NOT?: Term_Discipline_DefinitionWhereInput | Term_Discipline_DefinitionWhereInput[]
    disciplineId?: StringFilter<"Term_Discipline_Definition"> | string
    termId?: StringFilter<"Term_Discipline_Definition"> | string
    definitionId?: StringNullableFilter<"Term_Discipline_Definition"> | string | null
    discipline?: XOR<DisciplineRelationFilter, DisciplineWhereInput>
    definition?: XOR<DefinitionNullableRelationFilter, DefinitionWhereInput> | null
    term?: XOR<TermRelationFilter, TermWhereInput>
  }, "Id">

  export type Term_Discipline_DefinitionOrderByWithAggregationInput = {
    Id?: SortOrder
    disciplineId?: SortOrder
    termId?: SortOrder
    definitionId?: SortOrderInput | SortOrder
    _count?: Term_Discipline_DefinitionCountOrderByAggregateInput
    _max?: Term_Discipline_DefinitionMaxOrderByAggregateInput
    _min?: Term_Discipline_DefinitionMinOrderByAggregateInput
  }

  export type Term_Discipline_DefinitionScalarWhereWithAggregatesInput = {
    AND?: Term_Discipline_DefinitionScalarWhereWithAggregatesInput | Term_Discipline_DefinitionScalarWhereWithAggregatesInput[]
    OR?: Term_Discipline_DefinitionScalarWhereWithAggregatesInput[]
    NOT?: Term_Discipline_DefinitionScalarWhereWithAggregatesInput | Term_Discipline_DefinitionScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Term_Discipline_Definition"> | string
    disciplineId?: StringWithAggregatesFilter<"Term_Discipline_Definition"> | string
    termId?: StringWithAggregatesFilter<"Term_Discipline_Definition"> | string
    definitionId?: StringNullableWithAggregatesFilter<"Term_Discipline_Definition"> | string | null
  }

  export type Source_AuthorshipWhereInput = {
    AND?: Source_AuthorshipWhereInput | Source_AuthorshipWhereInput[]
    OR?: Source_AuthorshipWhereInput[]
    NOT?: Source_AuthorshipWhereInput | Source_AuthorshipWhereInput[]
    Id?: StringFilter<"Source_Authorship"> | string
    sourceId?: StringFilter<"Source_Authorship"> | string
    authorId?: StringNullableFilter<"Source_Authorship"> | string | null
    author?: XOR<AuthorNullableRelationFilter, AuthorWhereInput> | null
    source?: XOR<SourceRelationFilter, SourceWhereInput>
  }

  export type Source_AuthorshipOrderByWithRelationInput = {
    Id?: SortOrder
    sourceId?: SortOrder
    authorId?: SortOrderInput | SortOrder
    author?: AuthorOrderByWithRelationInput
    source?: SourceOrderByWithRelationInput
  }

  export type Source_AuthorshipWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: Source_AuthorshipWhereInput | Source_AuthorshipWhereInput[]
    OR?: Source_AuthorshipWhereInput[]
    NOT?: Source_AuthorshipWhereInput | Source_AuthorshipWhereInput[]
    sourceId?: StringFilter<"Source_Authorship"> | string
    authorId?: StringNullableFilter<"Source_Authorship"> | string | null
    author?: XOR<AuthorNullableRelationFilter, AuthorWhereInput> | null
    source?: XOR<SourceRelationFilter, SourceWhereInput>
  }, "Id">

  export type Source_AuthorshipOrderByWithAggregationInput = {
    Id?: SortOrder
    sourceId?: SortOrder
    authorId?: SortOrderInput | SortOrder
    _count?: Source_AuthorshipCountOrderByAggregateInput
    _max?: Source_AuthorshipMaxOrderByAggregateInput
    _min?: Source_AuthorshipMinOrderByAggregateInput
  }

  export type Source_AuthorshipScalarWhereWithAggregatesInput = {
    AND?: Source_AuthorshipScalarWhereWithAggregatesInput | Source_AuthorshipScalarWhereWithAggregatesInput[]
    OR?: Source_AuthorshipScalarWhereWithAggregatesInput[]
    NOT?: Source_AuthorshipScalarWhereWithAggregatesInput | Source_AuthorshipScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Source_Authorship"> | string
    sourceId?: StringWithAggregatesFilter<"Source_Authorship"> | string
    authorId?: StringNullableWithAggregatesFilter<"Source_Authorship"> | string | null
  }

  export type UsersCreateInput = {
    prontuario?: string
    name: string
    password: string
  }

  export type UsersUncheckedCreateInput = {
    prontuario?: string
    name: string
    password: string
  }

  export type UsersUpdateInput = {
    prontuario?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateInput = {
    prontuario?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpdateManyMutationInput = {
    prontuario?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    prontuario?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCreateInput = {
    id?: string
    name: string
    description?: string | null
    glossary?: GlossaryCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    glossary?: GlossaryUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    glossary?: GlossaryUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    glossary?: GlossaryUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GlossaryCreateInput = {
    id?: string
    name: string
    description?: string | null
    course: CourseCreateNestedOneWithoutGlossaryInput
    Discipline?: DisciplineCreateNestedManyWithoutGlossaryInput
  }

  export type GlossaryUncheckedCreateInput = {
    id?: string
    courseId: string
    name: string
    description?: string | null
    Discipline?: DisciplineUncheckedCreateNestedManyWithoutGlossaryInput
  }

  export type GlossaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutGlossaryNestedInput
    Discipline?: DisciplineUpdateManyWithoutGlossaryNestedInput
  }

  export type GlossaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    Discipline?: DisciplineUncheckedUpdateManyWithoutGlossaryNestedInput
  }

  export type GlossaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GlossaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisciplineCreateInput = {
    id?: string
    name: string
    description?: string | null
    year?: string | null
    glossary: GlossaryCreateNestedOneWithoutDisciplineInput
    Term_Discipline_Definition?: Term_Discipline_DefinitionCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateInput = {
    id?: string
    glossaryId: string
    name: string
    description?: string | null
    year?: string | null
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    glossary?: GlossaryUpdateOneRequiredWithoutDisciplineNestedInput
    Term_Discipline_Definition?: Term_Discipline_DefinitionUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    glossaryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisciplineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    glossaryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TermCreateInput = {
    id?: string
    name: string
    Term_Discipline_Definition?: Term_Discipline_DefinitionCreateNestedManyWithoutTermInput
    Translation?: TranslationCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateInput = {
    id?: string
    name: string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutTermInput
    Translation?: TranslationUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUpdateManyWithoutTermNestedInput
    Translation?: TranslationUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedUpdateManyWithoutTermNestedInput
    Translation?: TranslationUncheckedUpdateManyWithoutTermNestedInput
  }

  export type TermUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TermUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DefinitionCreateInput = {
    id?: string
    description?: string | null
    page: string
    Term_Discipline_Definition?: Term_Discipline_DefinitionCreateNestedManyWithoutDefinitionInput
    source: SourceCreateNestedOneWithoutDefinitionInput
  }

  export type DefinitionUncheckedCreateInput = {
    id?: string
    sourceId: string
    description?: string | null
    page: string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutDefinitionInput
  }

  export type DefinitionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUpdateManyWithoutDefinitionNestedInput
    source?: SourceUpdateOneRequiredWithoutDefinitionNestedInput
  }

  export type DefinitionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedUpdateManyWithoutDefinitionNestedInput
  }

  export type DefinitionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
  }

  export type DefinitionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
  }

  export type TranslationCreateInput = {
    translationId?: string
    language?: string | null
    translation?: string | null
    page?: string | null
    source: SourceCreateNestedOneWithoutTranslationInput
    term?: TermCreateNestedOneWithoutTranslationInput
  }

  export type TranslationUncheckedCreateInput = {
    translationId?: string
    termId?: string
    sourceId: string
    language?: string | null
    translation?: string | null
    page?: string | null
  }

  export type TranslationUpdateInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
    source?: SourceUpdateOneRequiredWithoutTranslationNestedInput
    term?: TermUpdateOneRequiredWithoutTranslationNestedInput
  }

  export type TranslationUncheckedUpdateInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TranslationUpdateManyMutationInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TranslationUncheckedUpdateManyInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceCreateInput = {
    sourceId?: string
    title?: string | null
    publisher?: string | null
    year?: string | null
    type_publication?: string | null
    Source_Authorship?: Source_AuthorshipCreateNestedManyWithoutSourceInput
    Translation?: TranslationCreateNestedManyWithoutSourceInput
    Definition?: DefinitionCreateNestedManyWithoutSourceInput
  }

  export type SourceUncheckedCreateInput = {
    sourceId?: string
    title?: string | null
    publisher?: string | null
    year?: string | null
    type_publication?: string | null
    Source_Authorship?: Source_AuthorshipUncheckedCreateNestedManyWithoutSourceInput
    Translation?: TranslationUncheckedCreateNestedManyWithoutSourceInput
    Definition?: DefinitionUncheckedCreateNestedManyWithoutSourceInput
  }

  export type SourceUpdateInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
    Source_Authorship?: Source_AuthorshipUpdateManyWithoutSourceNestedInput
    Translation?: TranslationUpdateManyWithoutSourceNestedInput
    Definition?: DefinitionUpdateManyWithoutSourceNestedInput
  }

  export type SourceUncheckedUpdateInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
    Source_Authorship?: Source_AuthorshipUncheckedUpdateManyWithoutSourceNestedInput
    Translation?: TranslationUncheckedUpdateManyWithoutSourceNestedInput
    Definition?: DefinitionUncheckedUpdateManyWithoutSourceNestedInput
  }

  export type SourceUpdateManyMutationInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceUncheckedUpdateManyInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorCreateInput = {
    authorId?: string
    name?: string | null
    Source_Authorship?: Source_AuthorshipCreateNestedManyWithoutAuthorInput
  }

  export type AuthorUncheckedCreateInput = {
    authorId?: string
    name?: string | null
    Source_Authorship?: Source_AuthorshipUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type AuthorUpdateInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    Source_Authorship?: Source_AuthorshipUpdateManyWithoutAuthorNestedInput
  }

  export type AuthorUncheckedUpdateInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    Source_Authorship?: Source_AuthorshipUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type AuthorUpdateManyMutationInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorUncheckedUpdateManyInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Term_Discipline_DefinitionCreateInput = {
    Id?: string
    discipline: DisciplineCreateNestedOneWithoutTerm_Discipline_DefinitionInput
    definition?: DefinitionCreateNestedOneWithoutTerm_Discipline_DefinitionInput
    term: TermCreateNestedOneWithoutTerm_Discipline_DefinitionInput
  }

  export type Term_Discipline_DefinitionUncheckedCreateInput = {
    Id?: string
    disciplineId: string
    termId: string
    definitionId?: string | null
  }

  export type Term_Discipline_DefinitionUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    discipline?: DisciplineUpdateOneRequiredWithoutTerm_Discipline_DefinitionNestedInput
    definition?: DefinitionUpdateOneWithoutTerm_Discipline_DefinitionNestedInput
    term?: TermUpdateOneRequiredWithoutTerm_Discipline_DefinitionNestedInput
  }

  export type Term_Discipline_DefinitionUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    disciplineId?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
    definitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Term_Discipline_DefinitionUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
  }

  export type Term_Discipline_DefinitionUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    disciplineId?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
    definitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Source_AuthorshipCreateInput = {
    Id?: string
    author?: AuthorCreateNestedOneWithoutSource_AuthorshipInput
    source: SourceCreateNestedOneWithoutSource_AuthorshipInput
  }

  export type Source_AuthorshipUncheckedCreateInput = {
    Id?: string
    sourceId: string
    authorId?: string | null
  }

  export type Source_AuthorshipUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    author?: AuthorUpdateOneWithoutSource_AuthorshipNestedInput
    source?: SourceUpdateOneRequiredWithoutSource_AuthorshipNestedInput
  }

  export type Source_AuthorshipUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Source_AuthorshipUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
  }

  export type Source_AuthorshipUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UsersCountOrderByAggregateInput = {
    prontuario?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    prontuario?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    prontuario?: SortOrder
    name?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type GlossaryListRelationFilter = {
    every?: GlossaryWhereInput
    some?: GlossaryWhereInput
    none?: GlossaryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GlossaryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type DisciplineListRelationFilter = {
    every?: DisciplineWhereInput
    some?: DisciplineWhereInput
    none?: DisciplineWhereInput
  }

  export type DisciplineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GlossaryCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GlossaryMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GlossaryMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GlossaryRelationFilter = {
    is?: GlossaryWhereInput
    isNot?: GlossaryWhereInput
  }

  export type Term_Discipline_DefinitionListRelationFilter = {
    every?: Term_Discipline_DefinitionWhereInput
    some?: Term_Discipline_DefinitionWhereInput
    none?: Term_Discipline_DefinitionWhereInput
  }

  export type Term_Discipline_DefinitionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DisciplineCountOrderByAggregateInput = {
    id?: SortOrder
    glossaryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    year?: SortOrder
  }

  export type DisciplineMaxOrderByAggregateInput = {
    id?: SortOrder
    glossaryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    year?: SortOrder
  }

  export type DisciplineMinOrderByAggregateInput = {
    id?: SortOrder
    glossaryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    year?: SortOrder
  }

  export type TranslationListRelationFilter = {
    every?: TranslationWhereInput
    some?: TranslationWhereInput
    none?: TranslationWhereInput
  }

  export type TranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TermCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TermMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TermMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SourceRelationFilter = {
    is?: SourceWhereInput
    isNot?: SourceWhereInput
  }

  export type DefinitionCountOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    description?: SortOrder
    page?: SortOrder
  }

  export type DefinitionMaxOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    description?: SortOrder
    page?: SortOrder
  }

  export type DefinitionMinOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    description?: SortOrder
    page?: SortOrder
  }

  export type TermRelationFilter = {
    is?: TermWhereInput
    isNot?: TermWhereInput
  }

  export type TranslationCountOrderByAggregateInput = {
    translationId?: SortOrder
    termId?: SortOrder
    sourceId?: SortOrder
    language?: SortOrder
    translation?: SortOrder
    page?: SortOrder
  }

  export type TranslationMaxOrderByAggregateInput = {
    translationId?: SortOrder
    termId?: SortOrder
    sourceId?: SortOrder
    language?: SortOrder
    translation?: SortOrder
    page?: SortOrder
  }

  export type TranslationMinOrderByAggregateInput = {
    translationId?: SortOrder
    termId?: SortOrder
    sourceId?: SortOrder
    language?: SortOrder
    translation?: SortOrder
    page?: SortOrder
  }

  export type Source_AuthorshipListRelationFilter = {
    every?: Source_AuthorshipWhereInput
    some?: Source_AuthorshipWhereInput
    none?: Source_AuthorshipWhereInput
  }

  export type DefinitionListRelationFilter = {
    every?: DefinitionWhereInput
    some?: DefinitionWhereInput
    none?: DefinitionWhereInput
  }

  export type Source_AuthorshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DefinitionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SourceCountOrderByAggregateInput = {
    sourceId?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    year?: SortOrder
    type_publication?: SortOrder
  }

  export type SourceMaxOrderByAggregateInput = {
    sourceId?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    year?: SortOrder
    type_publication?: SortOrder
  }

  export type SourceMinOrderByAggregateInput = {
    sourceId?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    year?: SortOrder
    type_publication?: SortOrder
  }

  export type AuthorCountOrderByAggregateInput = {
    authorId?: SortOrder
    name?: SortOrder
  }

  export type AuthorMaxOrderByAggregateInput = {
    authorId?: SortOrder
    name?: SortOrder
  }

  export type AuthorMinOrderByAggregateInput = {
    authorId?: SortOrder
    name?: SortOrder
  }

  export type DisciplineRelationFilter = {
    is?: DisciplineWhereInput
    isNot?: DisciplineWhereInput
  }

  export type DefinitionNullableRelationFilter = {
    is?: DefinitionWhereInput | null
    isNot?: DefinitionWhereInput | null
  }

  export type Term_Discipline_DefinitionCountOrderByAggregateInput = {
    Id?: SortOrder
    disciplineId?: SortOrder
    termId?: SortOrder
    definitionId?: SortOrder
  }

  export type Term_Discipline_DefinitionMaxOrderByAggregateInput = {
    Id?: SortOrder
    disciplineId?: SortOrder
    termId?: SortOrder
    definitionId?: SortOrder
  }

  export type Term_Discipline_DefinitionMinOrderByAggregateInput = {
    Id?: SortOrder
    disciplineId?: SortOrder
    termId?: SortOrder
    definitionId?: SortOrder
  }

  export type AuthorNullableRelationFilter = {
    is?: AuthorWhereInput | null
    isNot?: AuthorWhereInput | null
  }

  export type Source_AuthorshipCountOrderByAggregateInput = {
    Id?: SortOrder
    sourceId?: SortOrder
    authorId?: SortOrder
  }

  export type Source_AuthorshipMaxOrderByAggregateInput = {
    Id?: SortOrder
    sourceId?: SortOrder
    authorId?: SortOrder
  }

  export type Source_AuthorshipMinOrderByAggregateInput = {
    Id?: SortOrder
    sourceId?: SortOrder
    authorId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type GlossaryCreateNestedManyWithoutCourseInput = {
    create?: XOR<GlossaryCreateWithoutCourseInput, GlossaryUncheckedCreateWithoutCourseInput> | GlossaryCreateWithoutCourseInput[] | GlossaryUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: GlossaryCreateOrConnectWithoutCourseInput | GlossaryCreateOrConnectWithoutCourseInput[]
    connect?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
  }

  export type GlossaryUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<GlossaryCreateWithoutCourseInput, GlossaryUncheckedCreateWithoutCourseInput> | GlossaryCreateWithoutCourseInput[] | GlossaryUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: GlossaryCreateOrConnectWithoutCourseInput | GlossaryCreateOrConnectWithoutCourseInput[]
    connect?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GlossaryUpdateManyWithoutCourseNestedInput = {
    create?: XOR<GlossaryCreateWithoutCourseInput, GlossaryUncheckedCreateWithoutCourseInput> | GlossaryCreateWithoutCourseInput[] | GlossaryUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: GlossaryCreateOrConnectWithoutCourseInput | GlossaryCreateOrConnectWithoutCourseInput[]
    upsert?: GlossaryUpsertWithWhereUniqueWithoutCourseInput | GlossaryUpsertWithWhereUniqueWithoutCourseInput[]
    set?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
    disconnect?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
    delete?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
    connect?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
    update?: GlossaryUpdateWithWhereUniqueWithoutCourseInput | GlossaryUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: GlossaryUpdateManyWithWhereWithoutCourseInput | GlossaryUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: GlossaryScalarWhereInput | GlossaryScalarWhereInput[]
  }

  export type GlossaryUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<GlossaryCreateWithoutCourseInput, GlossaryUncheckedCreateWithoutCourseInput> | GlossaryCreateWithoutCourseInput[] | GlossaryUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: GlossaryCreateOrConnectWithoutCourseInput | GlossaryCreateOrConnectWithoutCourseInput[]
    upsert?: GlossaryUpsertWithWhereUniqueWithoutCourseInput | GlossaryUpsertWithWhereUniqueWithoutCourseInput[]
    set?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
    disconnect?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
    delete?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
    connect?: GlossaryWhereUniqueInput | GlossaryWhereUniqueInput[]
    update?: GlossaryUpdateWithWhereUniqueWithoutCourseInput | GlossaryUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: GlossaryUpdateManyWithWhereWithoutCourseInput | GlossaryUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: GlossaryScalarWhereInput | GlossaryScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutGlossaryInput = {
    create?: XOR<CourseCreateWithoutGlossaryInput, CourseUncheckedCreateWithoutGlossaryInput>
    connectOrCreate?: CourseCreateOrConnectWithoutGlossaryInput
    connect?: CourseWhereUniqueInput
  }

  export type DisciplineCreateNestedManyWithoutGlossaryInput = {
    create?: XOR<DisciplineCreateWithoutGlossaryInput, DisciplineUncheckedCreateWithoutGlossaryInput> | DisciplineCreateWithoutGlossaryInput[] | DisciplineUncheckedCreateWithoutGlossaryInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutGlossaryInput | DisciplineCreateOrConnectWithoutGlossaryInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
  }

  export type DisciplineUncheckedCreateNestedManyWithoutGlossaryInput = {
    create?: XOR<DisciplineCreateWithoutGlossaryInput, DisciplineUncheckedCreateWithoutGlossaryInput> | DisciplineCreateWithoutGlossaryInput[] | DisciplineUncheckedCreateWithoutGlossaryInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutGlossaryInput | DisciplineCreateOrConnectWithoutGlossaryInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutGlossaryNestedInput = {
    create?: XOR<CourseCreateWithoutGlossaryInput, CourseUncheckedCreateWithoutGlossaryInput>
    connectOrCreate?: CourseCreateOrConnectWithoutGlossaryInput
    upsert?: CourseUpsertWithoutGlossaryInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutGlossaryInput, CourseUpdateWithoutGlossaryInput>, CourseUncheckedUpdateWithoutGlossaryInput>
  }

  export type DisciplineUpdateManyWithoutGlossaryNestedInput = {
    create?: XOR<DisciplineCreateWithoutGlossaryInput, DisciplineUncheckedCreateWithoutGlossaryInput> | DisciplineCreateWithoutGlossaryInput[] | DisciplineUncheckedCreateWithoutGlossaryInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutGlossaryInput | DisciplineCreateOrConnectWithoutGlossaryInput[]
    upsert?: DisciplineUpsertWithWhereUniqueWithoutGlossaryInput | DisciplineUpsertWithWhereUniqueWithoutGlossaryInput[]
    set?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    disconnect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    delete?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    update?: DisciplineUpdateWithWhereUniqueWithoutGlossaryInput | DisciplineUpdateWithWhereUniqueWithoutGlossaryInput[]
    updateMany?: DisciplineUpdateManyWithWhereWithoutGlossaryInput | DisciplineUpdateManyWithWhereWithoutGlossaryInput[]
    deleteMany?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
  }

  export type DisciplineUncheckedUpdateManyWithoutGlossaryNestedInput = {
    create?: XOR<DisciplineCreateWithoutGlossaryInput, DisciplineUncheckedCreateWithoutGlossaryInput> | DisciplineCreateWithoutGlossaryInput[] | DisciplineUncheckedCreateWithoutGlossaryInput[]
    connectOrCreate?: DisciplineCreateOrConnectWithoutGlossaryInput | DisciplineCreateOrConnectWithoutGlossaryInput[]
    upsert?: DisciplineUpsertWithWhereUniqueWithoutGlossaryInput | DisciplineUpsertWithWhereUniqueWithoutGlossaryInput[]
    set?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    disconnect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    delete?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    connect?: DisciplineWhereUniqueInput | DisciplineWhereUniqueInput[]
    update?: DisciplineUpdateWithWhereUniqueWithoutGlossaryInput | DisciplineUpdateWithWhereUniqueWithoutGlossaryInput[]
    updateMany?: DisciplineUpdateManyWithWhereWithoutGlossaryInput | DisciplineUpdateManyWithWhereWithoutGlossaryInput[]
    deleteMany?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
  }

  export type GlossaryCreateNestedOneWithoutDisciplineInput = {
    create?: XOR<GlossaryCreateWithoutDisciplineInput, GlossaryUncheckedCreateWithoutDisciplineInput>
    connectOrCreate?: GlossaryCreateOrConnectWithoutDisciplineInput
    connect?: GlossaryWhereUniqueInput
  }

  export type Term_Discipline_DefinitionCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutDisciplineInput, Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput> | Term_Discipline_DefinitionCreateWithoutDisciplineInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput | Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
  }

  export type Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutDisciplineInput, Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput> | Term_Discipline_DefinitionCreateWithoutDisciplineInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput | Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
  }

  export type GlossaryUpdateOneRequiredWithoutDisciplineNestedInput = {
    create?: XOR<GlossaryCreateWithoutDisciplineInput, GlossaryUncheckedCreateWithoutDisciplineInput>
    connectOrCreate?: GlossaryCreateOrConnectWithoutDisciplineInput
    upsert?: GlossaryUpsertWithoutDisciplineInput
    connect?: GlossaryWhereUniqueInput
    update?: XOR<XOR<GlossaryUpdateToOneWithWhereWithoutDisciplineInput, GlossaryUpdateWithoutDisciplineInput>, GlossaryUncheckedUpdateWithoutDisciplineInput>
  }

  export type Term_Discipline_DefinitionUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutDisciplineInput, Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput> | Term_Discipline_DefinitionCreateWithoutDisciplineInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput | Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput[]
    upsert?: Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDisciplineInput | Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDisciplineInput[]
    set?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    disconnect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    delete?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    update?: Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDisciplineInput | Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: Term_Discipline_DefinitionUpdateManyWithWhereWithoutDisciplineInput | Term_Discipline_DefinitionUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: Term_Discipline_DefinitionScalarWhereInput | Term_Discipline_DefinitionScalarWhereInput[]
  }

  export type Term_Discipline_DefinitionUncheckedUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutDisciplineInput, Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput> | Term_Discipline_DefinitionCreateWithoutDisciplineInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput | Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput[]
    upsert?: Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDisciplineInput | Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDisciplineInput[]
    set?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    disconnect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    delete?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    update?: Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDisciplineInput | Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: Term_Discipline_DefinitionUpdateManyWithWhereWithoutDisciplineInput | Term_Discipline_DefinitionUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: Term_Discipline_DefinitionScalarWhereInput | Term_Discipline_DefinitionScalarWhereInput[]
  }

  export type Term_Discipline_DefinitionCreateNestedManyWithoutTermInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutTermInput, Term_Discipline_DefinitionUncheckedCreateWithoutTermInput> | Term_Discipline_DefinitionCreateWithoutTermInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutTermInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutTermInput | Term_Discipline_DefinitionCreateOrConnectWithoutTermInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
  }

  export type TranslationCreateNestedManyWithoutTermInput = {
    create?: XOR<TranslationCreateWithoutTermInput, TranslationUncheckedCreateWithoutTermInput> | TranslationCreateWithoutTermInput[] | TranslationUncheckedCreateWithoutTermInput[]
    connectOrCreate?: TranslationCreateOrConnectWithoutTermInput | TranslationCreateOrConnectWithoutTermInput[]
    connect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
  }

  export type Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutTermInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutTermInput, Term_Discipline_DefinitionUncheckedCreateWithoutTermInput> | Term_Discipline_DefinitionCreateWithoutTermInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutTermInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutTermInput | Term_Discipline_DefinitionCreateOrConnectWithoutTermInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
  }

  export type TranslationUncheckedCreateNestedManyWithoutTermInput = {
    create?: XOR<TranslationCreateWithoutTermInput, TranslationUncheckedCreateWithoutTermInput> | TranslationCreateWithoutTermInput[] | TranslationUncheckedCreateWithoutTermInput[]
    connectOrCreate?: TranslationCreateOrConnectWithoutTermInput | TranslationCreateOrConnectWithoutTermInput[]
    connect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
  }

  export type Term_Discipline_DefinitionUpdateManyWithoutTermNestedInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutTermInput, Term_Discipline_DefinitionUncheckedCreateWithoutTermInput> | Term_Discipline_DefinitionCreateWithoutTermInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutTermInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutTermInput | Term_Discipline_DefinitionCreateOrConnectWithoutTermInput[]
    upsert?: Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutTermInput | Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutTermInput[]
    set?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    disconnect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    delete?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    update?: Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutTermInput | Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: Term_Discipline_DefinitionUpdateManyWithWhereWithoutTermInput | Term_Discipline_DefinitionUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: Term_Discipline_DefinitionScalarWhereInput | Term_Discipline_DefinitionScalarWhereInput[]
  }

  export type TranslationUpdateManyWithoutTermNestedInput = {
    create?: XOR<TranslationCreateWithoutTermInput, TranslationUncheckedCreateWithoutTermInput> | TranslationCreateWithoutTermInput[] | TranslationUncheckedCreateWithoutTermInput[]
    connectOrCreate?: TranslationCreateOrConnectWithoutTermInput | TranslationCreateOrConnectWithoutTermInput[]
    upsert?: TranslationUpsertWithWhereUniqueWithoutTermInput | TranslationUpsertWithWhereUniqueWithoutTermInput[]
    set?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    disconnect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    delete?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    connect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    update?: TranslationUpdateWithWhereUniqueWithoutTermInput | TranslationUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: TranslationUpdateManyWithWhereWithoutTermInput | TranslationUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: TranslationScalarWhereInput | TranslationScalarWhereInput[]
  }

  export type Term_Discipline_DefinitionUncheckedUpdateManyWithoutTermNestedInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutTermInput, Term_Discipline_DefinitionUncheckedCreateWithoutTermInput> | Term_Discipline_DefinitionCreateWithoutTermInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutTermInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutTermInput | Term_Discipline_DefinitionCreateOrConnectWithoutTermInput[]
    upsert?: Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutTermInput | Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutTermInput[]
    set?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    disconnect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    delete?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    update?: Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutTermInput | Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: Term_Discipline_DefinitionUpdateManyWithWhereWithoutTermInput | Term_Discipline_DefinitionUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: Term_Discipline_DefinitionScalarWhereInput | Term_Discipline_DefinitionScalarWhereInput[]
  }

  export type TranslationUncheckedUpdateManyWithoutTermNestedInput = {
    create?: XOR<TranslationCreateWithoutTermInput, TranslationUncheckedCreateWithoutTermInput> | TranslationCreateWithoutTermInput[] | TranslationUncheckedCreateWithoutTermInput[]
    connectOrCreate?: TranslationCreateOrConnectWithoutTermInput | TranslationCreateOrConnectWithoutTermInput[]
    upsert?: TranslationUpsertWithWhereUniqueWithoutTermInput | TranslationUpsertWithWhereUniqueWithoutTermInput[]
    set?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    disconnect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    delete?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    connect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    update?: TranslationUpdateWithWhereUniqueWithoutTermInput | TranslationUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: TranslationUpdateManyWithWhereWithoutTermInput | TranslationUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: TranslationScalarWhereInput | TranslationScalarWhereInput[]
  }

  export type Term_Discipline_DefinitionCreateNestedManyWithoutDefinitionInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutDefinitionInput, Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput> | Term_Discipline_DefinitionCreateWithoutDefinitionInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput | Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
  }

  export type SourceCreateNestedOneWithoutDefinitionInput = {
    create?: XOR<SourceCreateWithoutDefinitionInput, SourceUncheckedCreateWithoutDefinitionInput>
    connectOrCreate?: SourceCreateOrConnectWithoutDefinitionInput
    connect?: SourceWhereUniqueInput
  }

  export type Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutDefinitionInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutDefinitionInput, Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput> | Term_Discipline_DefinitionCreateWithoutDefinitionInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput | Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
  }

  export type Term_Discipline_DefinitionUpdateManyWithoutDefinitionNestedInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutDefinitionInput, Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput> | Term_Discipline_DefinitionCreateWithoutDefinitionInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput | Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput[]
    upsert?: Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDefinitionInput | Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDefinitionInput[]
    set?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    disconnect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    delete?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    update?: Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDefinitionInput | Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDefinitionInput[]
    updateMany?: Term_Discipline_DefinitionUpdateManyWithWhereWithoutDefinitionInput | Term_Discipline_DefinitionUpdateManyWithWhereWithoutDefinitionInput[]
    deleteMany?: Term_Discipline_DefinitionScalarWhereInput | Term_Discipline_DefinitionScalarWhereInput[]
  }

  export type SourceUpdateOneRequiredWithoutDefinitionNestedInput = {
    create?: XOR<SourceCreateWithoutDefinitionInput, SourceUncheckedCreateWithoutDefinitionInput>
    connectOrCreate?: SourceCreateOrConnectWithoutDefinitionInput
    upsert?: SourceUpsertWithoutDefinitionInput
    connect?: SourceWhereUniqueInput
    update?: XOR<XOR<SourceUpdateToOneWithWhereWithoutDefinitionInput, SourceUpdateWithoutDefinitionInput>, SourceUncheckedUpdateWithoutDefinitionInput>
  }

  export type Term_Discipline_DefinitionUncheckedUpdateManyWithoutDefinitionNestedInput = {
    create?: XOR<Term_Discipline_DefinitionCreateWithoutDefinitionInput, Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput> | Term_Discipline_DefinitionCreateWithoutDefinitionInput[] | Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput[]
    connectOrCreate?: Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput | Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput[]
    upsert?: Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDefinitionInput | Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDefinitionInput[]
    set?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    disconnect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    delete?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    connect?: Term_Discipline_DefinitionWhereUniqueInput | Term_Discipline_DefinitionWhereUniqueInput[]
    update?: Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDefinitionInput | Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDefinitionInput[]
    updateMany?: Term_Discipline_DefinitionUpdateManyWithWhereWithoutDefinitionInput | Term_Discipline_DefinitionUpdateManyWithWhereWithoutDefinitionInput[]
    deleteMany?: Term_Discipline_DefinitionScalarWhereInput | Term_Discipline_DefinitionScalarWhereInput[]
  }

  export type SourceCreateNestedOneWithoutTranslationInput = {
    create?: XOR<SourceCreateWithoutTranslationInput, SourceUncheckedCreateWithoutTranslationInput>
    connectOrCreate?: SourceCreateOrConnectWithoutTranslationInput
    connect?: SourceWhereUniqueInput
  }

  export type TermCreateNestedOneWithoutTranslationInput = {
    create?: XOR<TermCreateWithoutTranslationInput, TermUncheckedCreateWithoutTranslationInput>
    connectOrCreate?: TermCreateOrConnectWithoutTranslationInput
    connect?: TermWhereUniqueInput
  }

  export type SourceUpdateOneRequiredWithoutTranslationNestedInput = {
    create?: XOR<SourceCreateWithoutTranslationInput, SourceUncheckedCreateWithoutTranslationInput>
    connectOrCreate?: SourceCreateOrConnectWithoutTranslationInput
    upsert?: SourceUpsertWithoutTranslationInput
    connect?: SourceWhereUniqueInput
    update?: XOR<XOR<SourceUpdateToOneWithWhereWithoutTranslationInput, SourceUpdateWithoutTranslationInput>, SourceUncheckedUpdateWithoutTranslationInput>
  }

  export type TermUpdateOneRequiredWithoutTranslationNestedInput = {
    create?: XOR<TermCreateWithoutTranslationInput, TermUncheckedCreateWithoutTranslationInput>
    connectOrCreate?: TermCreateOrConnectWithoutTranslationInput
    upsert?: TermUpsertWithoutTranslationInput
    connect?: TermWhereUniqueInput
    update?: XOR<XOR<TermUpdateToOneWithWhereWithoutTranslationInput, TermUpdateWithoutTranslationInput>, TermUncheckedUpdateWithoutTranslationInput>
  }

  export type Source_AuthorshipCreateNestedManyWithoutSourceInput = {
    create?: XOR<Source_AuthorshipCreateWithoutSourceInput, Source_AuthorshipUncheckedCreateWithoutSourceInput> | Source_AuthorshipCreateWithoutSourceInput[] | Source_AuthorshipUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: Source_AuthorshipCreateOrConnectWithoutSourceInput | Source_AuthorshipCreateOrConnectWithoutSourceInput[]
    connect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
  }

  export type TranslationCreateNestedManyWithoutSourceInput = {
    create?: XOR<TranslationCreateWithoutSourceInput, TranslationUncheckedCreateWithoutSourceInput> | TranslationCreateWithoutSourceInput[] | TranslationUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: TranslationCreateOrConnectWithoutSourceInput | TranslationCreateOrConnectWithoutSourceInput[]
    connect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
  }

  export type DefinitionCreateNestedManyWithoutSourceInput = {
    create?: XOR<DefinitionCreateWithoutSourceInput, DefinitionUncheckedCreateWithoutSourceInput> | DefinitionCreateWithoutSourceInput[] | DefinitionUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: DefinitionCreateOrConnectWithoutSourceInput | DefinitionCreateOrConnectWithoutSourceInput[]
    connect?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
  }

  export type Source_AuthorshipUncheckedCreateNestedManyWithoutSourceInput = {
    create?: XOR<Source_AuthorshipCreateWithoutSourceInput, Source_AuthorshipUncheckedCreateWithoutSourceInput> | Source_AuthorshipCreateWithoutSourceInput[] | Source_AuthorshipUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: Source_AuthorshipCreateOrConnectWithoutSourceInput | Source_AuthorshipCreateOrConnectWithoutSourceInput[]
    connect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
  }

  export type TranslationUncheckedCreateNestedManyWithoutSourceInput = {
    create?: XOR<TranslationCreateWithoutSourceInput, TranslationUncheckedCreateWithoutSourceInput> | TranslationCreateWithoutSourceInput[] | TranslationUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: TranslationCreateOrConnectWithoutSourceInput | TranslationCreateOrConnectWithoutSourceInput[]
    connect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
  }

  export type DefinitionUncheckedCreateNestedManyWithoutSourceInput = {
    create?: XOR<DefinitionCreateWithoutSourceInput, DefinitionUncheckedCreateWithoutSourceInput> | DefinitionCreateWithoutSourceInput[] | DefinitionUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: DefinitionCreateOrConnectWithoutSourceInput | DefinitionCreateOrConnectWithoutSourceInput[]
    connect?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
  }

  export type Source_AuthorshipUpdateManyWithoutSourceNestedInput = {
    create?: XOR<Source_AuthorshipCreateWithoutSourceInput, Source_AuthorshipUncheckedCreateWithoutSourceInput> | Source_AuthorshipCreateWithoutSourceInput[] | Source_AuthorshipUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: Source_AuthorshipCreateOrConnectWithoutSourceInput | Source_AuthorshipCreateOrConnectWithoutSourceInput[]
    upsert?: Source_AuthorshipUpsertWithWhereUniqueWithoutSourceInput | Source_AuthorshipUpsertWithWhereUniqueWithoutSourceInput[]
    set?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    disconnect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    delete?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    connect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    update?: Source_AuthorshipUpdateWithWhereUniqueWithoutSourceInput | Source_AuthorshipUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: Source_AuthorshipUpdateManyWithWhereWithoutSourceInput | Source_AuthorshipUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: Source_AuthorshipScalarWhereInput | Source_AuthorshipScalarWhereInput[]
  }

  export type TranslationUpdateManyWithoutSourceNestedInput = {
    create?: XOR<TranslationCreateWithoutSourceInput, TranslationUncheckedCreateWithoutSourceInput> | TranslationCreateWithoutSourceInput[] | TranslationUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: TranslationCreateOrConnectWithoutSourceInput | TranslationCreateOrConnectWithoutSourceInput[]
    upsert?: TranslationUpsertWithWhereUniqueWithoutSourceInput | TranslationUpsertWithWhereUniqueWithoutSourceInput[]
    set?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    disconnect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    delete?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    connect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    update?: TranslationUpdateWithWhereUniqueWithoutSourceInput | TranslationUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: TranslationUpdateManyWithWhereWithoutSourceInput | TranslationUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: TranslationScalarWhereInput | TranslationScalarWhereInput[]
  }

  export type DefinitionUpdateManyWithoutSourceNestedInput = {
    create?: XOR<DefinitionCreateWithoutSourceInput, DefinitionUncheckedCreateWithoutSourceInput> | DefinitionCreateWithoutSourceInput[] | DefinitionUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: DefinitionCreateOrConnectWithoutSourceInput | DefinitionCreateOrConnectWithoutSourceInput[]
    upsert?: DefinitionUpsertWithWhereUniqueWithoutSourceInput | DefinitionUpsertWithWhereUniqueWithoutSourceInput[]
    set?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
    disconnect?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
    delete?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
    connect?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
    update?: DefinitionUpdateWithWhereUniqueWithoutSourceInput | DefinitionUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: DefinitionUpdateManyWithWhereWithoutSourceInput | DefinitionUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: DefinitionScalarWhereInput | DefinitionScalarWhereInput[]
  }

  export type Source_AuthorshipUncheckedUpdateManyWithoutSourceNestedInput = {
    create?: XOR<Source_AuthorshipCreateWithoutSourceInput, Source_AuthorshipUncheckedCreateWithoutSourceInput> | Source_AuthorshipCreateWithoutSourceInput[] | Source_AuthorshipUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: Source_AuthorshipCreateOrConnectWithoutSourceInput | Source_AuthorshipCreateOrConnectWithoutSourceInput[]
    upsert?: Source_AuthorshipUpsertWithWhereUniqueWithoutSourceInput | Source_AuthorshipUpsertWithWhereUniqueWithoutSourceInput[]
    set?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    disconnect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    delete?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    connect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    update?: Source_AuthorshipUpdateWithWhereUniqueWithoutSourceInput | Source_AuthorshipUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: Source_AuthorshipUpdateManyWithWhereWithoutSourceInput | Source_AuthorshipUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: Source_AuthorshipScalarWhereInput | Source_AuthorshipScalarWhereInput[]
  }

  export type TranslationUncheckedUpdateManyWithoutSourceNestedInput = {
    create?: XOR<TranslationCreateWithoutSourceInput, TranslationUncheckedCreateWithoutSourceInput> | TranslationCreateWithoutSourceInput[] | TranslationUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: TranslationCreateOrConnectWithoutSourceInput | TranslationCreateOrConnectWithoutSourceInput[]
    upsert?: TranslationUpsertWithWhereUniqueWithoutSourceInput | TranslationUpsertWithWhereUniqueWithoutSourceInput[]
    set?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    disconnect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    delete?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    connect?: TranslationWhereUniqueInput | TranslationWhereUniqueInput[]
    update?: TranslationUpdateWithWhereUniqueWithoutSourceInput | TranslationUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: TranslationUpdateManyWithWhereWithoutSourceInput | TranslationUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: TranslationScalarWhereInput | TranslationScalarWhereInput[]
  }

  export type DefinitionUncheckedUpdateManyWithoutSourceNestedInput = {
    create?: XOR<DefinitionCreateWithoutSourceInput, DefinitionUncheckedCreateWithoutSourceInput> | DefinitionCreateWithoutSourceInput[] | DefinitionUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: DefinitionCreateOrConnectWithoutSourceInput | DefinitionCreateOrConnectWithoutSourceInput[]
    upsert?: DefinitionUpsertWithWhereUniqueWithoutSourceInput | DefinitionUpsertWithWhereUniqueWithoutSourceInput[]
    set?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
    disconnect?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
    delete?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
    connect?: DefinitionWhereUniqueInput | DefinitionWhereUniqueInput[]
    update?: DefinitionUpdateWithWhereUniqueWithoutSourceInput | DefinitionUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: DefinitionUpdateManyWithWhereWithoutSourceInput | DefinitionUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: DefinitionScalarWhereInput | DefinitionScalarWhereInput[]
  }

  export type Source_AuthorshipCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Source_AuthorshipCreateWithoutAuthorInput, Source_AuthorshipUncheckedCreateWithoutAuthorInput> | Source_AuthorshipCreateWithoutAuthorInput[] | Source_AuthorshipUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: Source_AuthorshipCreateOrConnectWithoutAuthorInput | Source_AuthorshipCreateOrConnectWithoutAuthorInput[]
    connect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
  }

  export type Source_AuthorshipUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Source_AuthorshipCreateWithoutAuthorInput, Source_AuthorshipUncheckedCreateWithoutAuthorInput> | Source_AuthorshipCreateWithoutAuthorInput[] | Source_AuthorshipUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: Source_AuthorshipCreateOrConnectWithoutAuthorInput | Source_AuthorshipCreateOrConnectWithoutAuthorInput[]
    connect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
  }

  export type Source_AuthorshipUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Source_AuthorshipCreateWithoutAuthorInput, Source_AuthorshipUncheckedCreateWithoutAuthorInput> | Source_AuthorshipCreateWithoutAuthorInput[] | Source_AuthorshipUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: Source_AuthorshipCreateOrConnectWithoutAuthorInput | Source_AuthorshipCreateOrConnectWithoutAuthorInput[]
    upsert?: Source_AuthorshipUpsertWithWhereUniqueWithoutAuthorInput | Source_AuthorshipUpsertWithWhereUniqueWithoutAuthorInput[]
    set?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    disconnect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    delete?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    connect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    update?: Source_AuthorshipUpdateWithWhereUniqueWithoutAuthorInput | Source_AuthorshipUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: Source_AuthorshipUpdateManyWithWhereWithoutAuthorInput | Source_AuthorshipUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: Source_AuthorshipScalarWhereInput | Source_AuthorshipScalarWhereInput[]
  }

  export type Source_AuthorshipUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Source_AuthorshipCreateWithoutAuthorInput, Source_AuthorshipUncheckedCreateWithoutAuthorInput> | Source_AuthorshipCreateWithoutAuthorInput[] | Source_AuthorshipUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: Source_AuthorshipCreateOrConnectWithoutAuthorInput | Source_AuthorshipCreateOrConnectWithoutAuthorInput[]
    upsert?: Source_AuthorshipUpsertWithWhereUniqueWithoutAuthorInput | Source_AuthorshipUpsertWithWhereUniqueWithoutAuthorInput[]
    set?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    disconnect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    delete?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    connect?: Source_AuthorshipWhereUniqueInput | Source_AuthorshipWhereUniqueInput[]
    update?: Source_AuthorshipUpdateWithWhereUniqueWithoutAuthorInput | Source_AuthorshipUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: Source_AuthorshipUpdateManyWithWhereWithoutAuthorInput | Source_AuthorshipUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: Source_AuthorshipScalarWhereInput | Source_AuthorshipScalarWhereInput[]
  }

  export type DisciplineCreateNestedOneWithoutTerm_Discipline_DefinitionInput = {
    create?: XOR<DisciplineCreateWithoutTerm_Discipline_DefinitionInput, DisciplineUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutTerm_Discipline_DefinitionInput
    connect?: DisciplineWhereUniqueInput
  }

  export type DefinitionCreateNestedOneWithoutTerm_Discipline_DefinitionInput = {
    create?: XOR<DefinitionCreateWithoutTerm_Discipline_DefinitionInput, DefinitionUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    connectOrCreate?: DefinitionCreateOrConnectWithoutTerm_Discipline_DefinitionInput
    connect?: DefinitionWhereUniqueInput
  }

  export type TermCreateNestedOneWithoutTerm_Discipline_DefinitionInput = {
    create?: XOR<TermCreateWithoutTerm_Discipline_DefinitionInput, TermUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    connectOrCreate?: TermCreateOrConnectWithoutTerm_Discipline_DefinitionInput
    connect?: TermWhereUniqueInput
  }

  export type DisciplineUpdateOneRequiredWithoutTerm_Discipline_DefinitionNestedInput = {
    create?: XOR<DisciplineCreateWithoutTerm_Discipline_DefinitionInput, DisciplineUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutTerm_Discipline_DefinitionInput
    upsert?: DisciplineUpsertWithoutTerm_Discipline_DefinitionInput
    connect?: DisciplineWhereUniqueInput
    update?: XOR<XOR<DisciplineUpdateToOneWithWhereWithoutTerm_Discipline_DefinitionInput, DisciplineUpdateWithoutTerm_Discipline_DefinitionInput>, DisciplineUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
  }

  export type DefinitionUpdateOneWithoutTerm_Discipline_DefinitionNestedInput = {
    create?: XOR<DefinitionCreateWithoutTerm_Discipline_DefinitionInput, DefinitionUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    connectOrCreate?: DefinitionCreateOrConnectWithoutTerm_Discipline_DefinitionInput
    upsert?: DefinitionUpsertWithoutTerm_Discipline_DefinitionInput
    disconnect?: DefinitionWhereInput | boolean
    delete?: DefinitionWhereInput | boolean
    connect?: DefinitionWhereUniqueInput
    update?: XOR<XOR<DefinitionUpdateToOneWithWhereWithoutTerm_Discipline_DefinitionInput, DefinitionUpdateWithoutTerm_Discipline_DefinitionInput>, DefinitionUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
  }

  export type TermUpdateOneRequiredWithoutTerm_Discipline_DefinitionNestedInput = {
    create?: XOR<TermCreateWithoutTerm_Discipline_DefinitionInput, TermUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    connectOrCreate?: TermCreateOrConnectWithoutTerm_Discipline_DefinitionInput
    upsert?: TermUpsertWithoutTerm_Discipline_DefinitionInput
    connect?: TermWhereUniqueInput
    update?: XOR<XOR<TermUpdateToOneWithWhereWithoutTerm_Discipline_DefinitionInput, TermUpdateWithoutTerm_Discipline_DefinitionInput>, TermUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
  }

  export type AuthorCreateNestedOneWithoutSource_AuthorshipInput = {
    create?: XOR<AuthorCreateWithoutSource_AuthorshipInput, AuthorUncheckedCreateWithoutSource_AuthorshipInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutSource_AuthorshipInput
    connect?: AuthorWhereUniqueInput
  }

  export type SourceCreateNestedOneWithoutSource_AuthorshipInput = {
    create?: XOR<SourceCreateWithoutSource_AuthorshipInput, SourceUncheckedCreateWithoutSource_AuthorshipInput>
    connectOrCreate?: SourceCreateOrConnectWithoutSource_AuthorshipInput
    connect?: SourceWhereUniqueInput
  }

  export type AuthorUpdateOneWithoutSource_AuthorshipNestedInput = {
    create?: XOR<AuthorCreateWithoutSource_AuthorshipInput, AuthorUncheckedCreateWithoutSource_AuthorshipInput>
    connectOrCreate?: AuthorCreateOrConnectWithoutSource_AuthorshipInput
    upsert?: AuthorUpsertWithoutSource_AuthorshipInput
    disconnect?: AuthorWhereInput | boolean
    delete?: AuthorWhereInput | boolean
    connect?: AuthorWhereUniqueInput
    update?: XOR<XOR<AuthorUpdateToOneWithWhereWithoutSource_AuthorshipInput, AuthorUpdateWithoutSource_AuthorshipInput>, AuthorUncheckedUpdateWithoutSource_AuthorshipInput>
  }

  export type SourceUpdateOneRequiredWithoutSource_AuthorshipNestedInput = {
    create?: XOR<SourceCreateWithoutSource_AuthorshipInput, SourceUncheckedCreateWithoutSource_AuthorshipInput>
    connectOrCreate?: SourceCreateOrConnectWithoutSource_AuthorshipInput
    upsert?: SourceUpsertWithoutSource_AuthorshipInput
    connect?: SourceWhereUniqueInput
    update?: XOR<XOR<SourceUpdateToOneWithWhereWithoutSource_AuthorshipInput, SourceUpdateWithoutSource_AuthorshipInput>, SourceUncheckedUpdateWithoutSource_AuthorshipInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type GlossaryCreateWithoutCourseInput = {
    id?: string
    name: string
    description?: string | null
    Discipline?: DisciplineCreateNestedManyWithoutGlossaryInput
  }

  export type GlossaryUncheckedCreateWithoutCourseInput = {
    id?: string
    name: string
    description?: string | null
    Discipline?: DisciplineUncheckedCreateNestedManyWithoutGlossaryInput
  }

  export type GlossaryCreateOrConnectWithoutCourseInput = {
    where: GlossaryWhereUniqueInput
    create: XOR<GlossaryCreateWithoutCourseInput, GlossaryUncheckedCreateWithoutCourseInput>
  }

  export type GlossaryUpsertWithWhereUniqueWithoutCourseInput = {
    where: GlossaryWhereUniqueInput
    update: XOR<GlossaryUpdateWithoutCourseInput, GlossaryUncheckedUpdateWithoutCourseInput>
    create: XOR<GlossaryCreateWithoutCourseInput, GlossaryUncheckedCreateWithoutCourseInput>
  }

  export type GlossaryUpdateWithWhereUniqueWithoutCourseInput = {
    where: GlossaryWhereUniqueInput
    data: XOR<GlossaryUpdateWithoutCourseInput, GlossaryUncheckedUpdateWithoutCourseInput>
  }

  export type GlossaryUpdateManyWithWhereWithoutCourseInput = {
    where: GlossaryScalarWhereInput
    data: XOR<GlossaryUpdateManyMutationInput, GlossaryUncheckedUpdateManyWithoutCourseInput>
  }

  export type GlossaryScalarWhereInput = {
    AND?: GlossaryScalarWhereInput | GlossaryScalarWhereInput[]
    OR?: GlossaryScalarWhereInput[]
    NOT?: GlossaryScalarWhereInput | GlossaryScalarWhereInput[]
    id?: StringFilter<"Glossary"> | string
    courseId?: StringFilter<"Glossary"> | string
    name?: StringFilter<"Glossary"> | string
    description?: StringNullableFilter<"Glossary"> | string | null
  }

  export type CourseCreateWithoutGlossaryInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type CourseUncheckedCreateWithoutGlossaryInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type CourseCreateOrConnectWithoutGlossaryInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutGlossaryInput, CourseUncheckedCreateWithoutGlossaryInput>
  }

  export type DisciplineCreateWithoutGlossaryInput = {
    id?: string
    name: string
    description?: string | null
    year?: string | null
    Term_Discipline_Definition?: Term_Discipline_DefinitionCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateWithoutGlossaryInput = {
    id?: string
    name: string
    description?: string | null
    year?: string | null
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineCreateOrConnectWithoutGlossaryInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutGlossaryInput, DisciplineUncheckedCreateWithoutGlossaryInput>
  }

  export type CourseUpsertWithoutGlossaryInput = {
    update: XOR<CourseUpdateWithoutGlossaryInput, CourseUncheckedUpdateWithoutGlossaryInput>
    create: XOR<CourseCreateWithoutGlossaryInput, CourseUncheckedCreateWithoutGlossaryInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutGlossaryInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutGlossaryInput, CourseUncheckedUpdateWithoutGlossaryInput>
  }

  export type CourseUpdateWithoutGlossaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUncheckedUpdateWithoutGlossaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisciplineUpsertWithWhereUniqueWithoutGlossaryInput = {
    where: DisciplineWhereUniqueInput
    update: XOR<DisciplineUpdateWithoutGlossaryInput, DisciplineUncheckedUpdateWithoutGlossaryInput>
    create: XOR<DisciplineCreateWithoutGlossaryInput, DisciplineUncheckedCreateWithoutGlossaryInput>
  }

  export type DisciplineUpdateWithWhereUniqueWithoutGlossaryInput = {
    where: DisciplineWhereUniqueInput
    data: XOR<DisciplineUpdateWithoutGlossaryInput, DisciplineUncheckedUpdateWithoutGlossaryInput>
  }

  export type DisciplineUpdateManyWithWhereWithoutGlossaryInput = {
    where: DisciplineScalarWhereInput
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyWithoutGlossaryInput>
  }

  export type DisciplineScalarWhereInput = {
    AND?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
    OR?: DisciplineScalarWhereInput[]
    NOT?: DisciplineScalarWhereInput | DisciplineScalarWhereInput[]
    id?: StringFilter<"Discipline"> | string
    glossaryId?: StringFilter<"Discipline"> | string
    name?: StringFilter<"Discipline"> | string
    description?: StringNullableFilter<"Discipline"> | string | null
    year?: StringNullableFilter<"Discipline"> | string | null
  }

  export type GlossaryCreateWithoutDisciplineInput = {
    id?: string
    name: string
    description?: string | null
    course: CourseCreateNestedOneWithoutGlossaryInput
  }

  export type GlossaryUncheckedCreateWithoutDisciplineInput = {
    id?: string
    courseId: string
    name: string
    description?: string | null
  }

  export type GlossaryCreateOrConnectWithoutDisciplineInput = {
    where: GlossaryWhereUniqueInput
    create: XOR<GlossaryCreateWithoutDisciplineInput, GlossaryUncheckedCreateWithoutDisciplineInput>
  }

  export type Term_Discipline_DefinitionCreateWithoutDisciplineInput = {
    Id?: string
    definition?: DefinitionCreateNestedOneWithoutTerm_Discipline_DefinitionInput
    term: TermCreateNestedOneWithoutTerm_Discipline_DefinitionInput
  }

  export type Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput = {
    Id?: string
    termId: string
    definitionId?: string | null
  }

  export type Term_Discipline_DefinitionCreateOrConnectWithoutDisciplineInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    create: XOR<Term_Discipline_DefinitionCreateWithoutDisciplineInput, Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput>
  }

  export type GlossaryUpsertWithoutDisciplineInput = {
    update: XOR<GlossaryUpdateWithoutDisciplineInput, GlossaryUncheckedUpdateWithoutDisciplineInput>
    create: XOR<GlossaryCreateWithoutDisciplineInput, GlossaryUncheckedCreateWithoutDisciplineInput>
    where?: GlossaryWhereInput
  }

  export type GlossaryUpdateToOneWithWhereWithoutDisciplineInput = {
    where?: GlossaryWhereInput
    data: XOR<GlossaryUpdateWithoutDisciplineInput, GlossaryUncheckedUpdateWithoutDisciplineInput>
  }

  export type GlossaryUpdateWithoutDisciplineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutGlossaryNestedInput
  }

  export type GlossaryUncheckedUpdateWithoutDisciplineInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    update: XOR<Term_Discipline_DefinitionUpdateWithoutDisciplineInput, Term_Discipline_DefinitionUncheckedUpdateWithoutDisciplineInput>
    create: XOR<Term_Discipline_DefinitionCreateWithoutDisciplineInput, Term_Discipline_DefinitionUncheckedCreateWithoutDisciplineInput>
  }

  export type Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    data: XOR<Term_Discipline_DefinitionUpdateWithoutDisciplineInput, Term_Discipline_DefinitionUncheckedUpdateWithoutDisciplineInput>
  }

  export type Term_Discipline_DefinitionUpdateManyWithWhereWithoutDisciplineInput = {
    where: Term_Discipline_DefinitionScalarWhereInput
    data: XOR<Term_Discipline_DefinitionUpdateManyMutationInput, Term_Discipline_DefinitionUncheckedUpdateManyWithoutDisciplineInput>
  }

  export type Term_Discipline_DefinitionScalarWhereInput = {
    AND?: Term_Discipline_DefinitionScalarWhereInput | Term_Discipline_DefinitionScalarWhereInput[]
    OR?: Term_Discipline_DefinitionScalarWhereInput[]
    NOT?: Term_Discipline_DefinitionScalarWhereInput | Term_Discipline_DefinitionScalarWhereInput[]
    Id?: StringFilter<"Term_Discipline_Definition"> | string
    disciplineId?: StringFilter<"Term_Discipline_Definition"> | string
    termId?: StringFilter<"Term_Discipline_Definition"> | string
    definitionId?: StringNullableFilter<"Term_Discipline_Definition"> | string | null
  }

  export type Term_Discipline_DefinitionCreateWithoutTermInput = {
    Id?: string
    discipline: DisciplineCreateNestedOneWithoutTerm_Discipline_DefinitionInput
    definition?: DefinitionCreateNestedOneWithoutTerm_Discipline_DefinitionInput
  }

  export type Term_Discipline_DefinitionUncheckedCreateWithoutTermInput = {
    Id?: string
    disciplineId: string
    definitionId?: string | null
  }

  export type Term_Discipline_DefinitionCreateOrConnectWithoutTermInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    create: XOR<Term_Discipline_DefinitionCreateWithoutTermInput, Term_Discipline_DefinitionUncheckedCreateWithoutTermInput>
  }

  export type TranslationCreateWithoutTermInput = {
    translationId?: string
    language?: string | null
    translation?: string | null
    page?: string | null
    source: SourceCreateNestedOneWithoutTranslationInput
  }

  export type TranslationUncheckedCreateWithoutTermInput = {
    translationId?: string
    sourceId: string
    language?: string | null
    translation?: string | null
    page?: string | null
  }

  export type TranslationCreateOrConnectWithoutTermInput = {
    where: TranslationWhereUniqueInput
    create: XOR<TranslationCreateWithoutTermInput, TranslationUncheckedCreateWithoutTermInput>
  }

  export type Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutTermInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    update: XOR<Term_Discipline_DefinitionUpdateWithoutTermInput, Term_Discipline_DefinitionUncheckedUpdateWithoutTermInput>
    create: XOR<Term_Discipline_DefinitionCreateWithoutTermInput, Term_Discipline_DefinitionUncheckedCreateWithoutTermInput>
  }

  export type Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutTermInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    data: XOR<Term_Discipline_DefinitionUpdateWithoutTermInput, Term_Discipline_DefinitionUncheckedUpdateWithoutTermInput>
  }

  export type Term_Discipline_DefinitionUpdateManyWithWhereWithoutTermInput = {
    where: Term_Discipline_DefinitionScalarWhereInput
    data: XOR<Term_Discipline_DefinitionUpdateManyMutationInput, Term_Discipline_DefinitionUncheckedUpdateManyWithoutTermInput>
  }

  export type TranslationUpsertWithWhereUniqueWithoutTermInput = {
    where: TranslationWhereUniqueInput
    update: XOR<TranslationUpdateWithoutTermInput, TranslationUncheckedUpdateWithoutTermInput>
    create: XOR<TranslationCreateWithoutTermInput, TranslationUncheckedCreateWithoutTermInput>
  }

  export type TranslationUpdateWithWhereUniqueWithoutTermInput = {
    where: TranslationWhereUniqueInput
    data: XOR<TranslationUpdateWithoutTermInput, TranslationUncheckedUpdateWithoutTermInput>
  }

  export type TranslationUpdateManyWithWhereWithoutTermInput = {
    where: TranslationScalarWhereInput
    data: XOR<TranslationUpdateManyMutationInput, TranslationUncheckedUpdateManyWithoutTermInput>
  }

  export type TranslationScalarWhereInput = {
    AND?: TranslationScalarWhereInput | TranslationScalarWhereInput[]
    OR?: TranslationScalarWhereInput[]
    NOT?: TranslationScalarWhereInput | TranslationScalarWhereInput[]
    translationId?: StringFilter<"Translation"> | string
    termId?: StringFilter<"Translation"> | string
    sourceId?: StringFilter<"Translation"> | string
    language?: StringNullableFilter<"Translation"> | string | null
    translation?: StringNullableFilter<"Translation"> | string | null
    page?: StringNullableFilter<"Translation"> | string | null
  }

  export type Term_Discipline_DefinitionCreateWithoutDefinitionInput = {
    Id?: string
    discipline: DisciplineCreateNestedOneWithoutTerm_Discipline_DefinitionInput
    term: TermCreateNestedOneWithoutTerm_Discipline_DefinitionInput
  }

  export type Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput = {
    Id?: string
    disciplineId: string
    termId: string
  }

  export type Term_Discipline_DefinitionCreateOrConnectWithoutDefinitionInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    create: XOR<Term_Discipline_DefinitionCreateWithoutDefinitionInput, Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput>
  }

  export type SourceCreateWithoutDefinitionInput = {
    sourceId?: string
    title?: string | null
    publisher?: string | null
    year?: string | null
    type_publication?: string | null
    Source_Authorship?: Source_AuthorshipCreateNestedManyWithoutSourceInput
    Translation?: TranslationCreateNestedManyWithoutSourceInput
  }

  export type SourceUncheckedCreateWithoutDefinitionInput = {
    sourceId?: string
    title?: string | null
    publisher?: string | null
    year?: string | null
    type_publication?: string | null
    Source_Authorship?: Source_AuthorshipUncheckedCreateNestedManyWithoutSourceInput
    Translation?: TranslationUncheckedCreateNestedManyWithoutSourceInput
  }

  export type SourceCreateOrConnectWithoutDefinitionInput = {
    where: SourceWhereUniqueInput
    create: XOR<SourceCreateWithoutDefinitionInput, SourceUncheckedCreateWithoutDefinitionInput>
  }

  export type Term_Discipline_DefinitionUpsertWithWhereUniqueWithoutDefinitionInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    update: XOR<Term_Discipline_DefinitionUpdateWithoutDefinitionInput, Term_Discipline_DefinitionUncheckedUpdateWithoutDefinitionInput>
    create: XOR<Term_Discipline_DefinitionCreateWithoutDefinitionInput, Term_Discipline_DefinitionUncheckedCreateWithoutDefinitionInput>
  }

  export type Term_Discipline_DefinitionUpdateWithWhereUniqueWithoutDefinitionInput = {
    where: Term_Discipline_DefinitionWhereUniqueInput
    data: XOR<Term_Discipline_DefinitionUpdateWithoutDefinitionInput, Term_Discipline_DefinitionUncheckedUpdateWithoutDefinitionInput>
  }

  export type Term_Discipline_DefinitionUpdateManyWithWhereWithoutDefinitionInput = {
    where: Term_Discipline_DefinitionScalarWhereInput
    data: XOR<Term_Discipline_DefinitionUpdateManyMutationInput, Term_Discipline_DefinitionUncheckedUpdateManyWithoutDefinitionInput>
  }

  export type SourceUpsertWithoutDefinitionInput = {
    update: XOR<SourceUpdateWithoutDefinitionInput, SourceUncheckedUpdateWithoutDefinitionInput>
    create: XOR<SourceCreateWithoutDefinitionInput, SourceUncheckedCreateWithoutDefinitionInput>
    where?: SourceWhereInput
  }

  export type SourceUpdateToOneWithWhereWithoutDefinitionInput = {
    where?: SourceWhereInput
    data: XOR<SourceUpdateWithoutDefinitionInput, SourceUncheckedUpdateWithoutDefinitionInput>
  }

  export type SourceUpdateWithoutDefinitionInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
    Source_Authorship?: Source_AuthorshipUpdateManyWithoutSourceNestedInput
    Translation?: TranslationUpdateManyWithoutSourceNestedInput
  }

  export type SourceUncheckedUpdateWithoutDefinitionInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
    Source_Authorship?: Source_AuthorshipUncheckedUpdateManyWithoutSourceNestedInput
    Translation?: TranslationUncheckedUpdateManyWithoutSourceNestedInput
  }

  export type SourceCreateWithoutTranslationInput = {
    sourceId?: string
    title?: string | null
    publisher?: string | null
    year?: string | null
    type_publication?: string | null
    Source_Authorship?: Source_AuthorshipCreateNestedManyWithoutSourceInput
    Definition?: DefinitionCreateNestedManyWithoutSourceInput
  }

  export type SourceUncheckedCreateWithoutTranslationInput = {
    sourceId?: string
    title?: string | null
    publisher?: string | null
    year?: string | null
    type_publication?: string | null
    Source_Authorship?: Source_AuthorshipUncheckedCreateNestedManyWithoutSourceInput
    Definition?: DefinitionUncheckedCreateNestedManyWithoutSourceInput
  }

  export type SourceCreateOrConnectWithoutTranslationInput = {
    where: SourceWhereUniqueInput
    create: XOR<SourceCreateWithoutTranslationInput, SourceUncheckedCreateWithoutTranslationInput>
  }

  export type TermCreateWithoutTranslationInput = {
    id?: string
    name: string
    Term_Discipline_Definition?: Term_Discipline_DefinitionCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutTranslationInput = {
    id?: string
    name: string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutTranslationInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutTranslationInput, TermUncheckedCreateWithoutTranslationInput>
  }

  export type SourceUpsertWithoutTranslationInput = {
    update: XOR<SourceUpdateWithoutTranslationInput, SourceUncheckedUpdateWithoutTranslationInput>
    create: XOR<SourceCreateWithoutTranslationInput, SourceUncheckedCreateWithoutTranslationInput>
    where?: SourceWhereInput
  }

  export type SourceUpdateToOneWithWhereWithoutTranslationInput = {
    where?: SourceWhereInput
    data: XOR<SourceUpdateWithoutTranslationInput, SourceUncheckedUpdateWithoutTranslationInput>
  }

  export type SourceUpdateWithoutTranslationInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
    Source_Authorship?: Source_AuthorshipUpdateManyWithoutSourceNestedInput
    Definition?: DefinitionUpdateManyWithoutSourceNestedInput
  }

  export type SourceUncheckedUpdateWithoutTranslationInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
    Source_Authorship?: Source_AuthorshipUncheckedUpdateManyWithoutSourceNestedInput
    Definition?: DefinitionUncheckedUpdateManyWithoutSourceNestedInput
  }

  export type TermUpsertWithoutTranslationInput = {
    update: XOR<TermUpdateWithoutTranslationInput, TermUncheckedUpdateWithoutTranslationInput>
    create: XOR<TermCreateWithoutTranslationInput, TermUncheckedCreateWithoutTranslationInput>
    where?: TermWhereInput
  }

  export type TermUpdateToOneWithWhereWithoutTranslationInput = {
    where?: TermWhereInput
    data: XOR<TermUpdateWithoutTranslationInput, TermUncheckedUpdateWithoutTranslationInput>
  }

  export type TermUpdateWithoutTranslationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateWithoutTranslationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedUpdateManyWithoutTermNestedInput
  }

  export type Source_AuthorshipCreateWithoutSourceInput = {
    Id?: string
    author?: AuthorCreateNestedOneWithoutSource_AuthorshipInput
  }

  export type Source_AuthorshipUncheckedCreateWithoutSourceInput = {
    Id?: string
    authorId?: string | null
  }

  export type Source_AuthorshipCreateOrConnectWithoutSourceInput = {
    where: Source_AuthorshipWhereUniqueInput
    create: XOR<Source_AuthorshipCreateWithoutSourceInput, Source_AuthorshipUncheckedCreateWithoutSourceInput>
  }

  export type TranslationCreateWithoutSourceInput = {
    translationId?: string
    language?: string | null
    translation?: string | null
    page?: string | null
    term?: TermCreateNestedOneWithoutTranslationInput
  }

  export type TranslationUncheckedCreateWithoutSourceInput = {
    translationId?: string
    termId?: string
    language?: string | null
    translation?: string | null
    page?: string | null
  }

  export type TranslationCreateOrConnectWithoutSourceInput = {
    where: TranslationWhereUniqueInput
    create: XOR<TranslationCreateWithoutSourceInput, TranslationUncheckedCreateWithoutSourceInput>
  }

  export type DefinitionCreateWithoutSourceInput = {
    id?: string
    description?: string | null
    page: string
    Term_Discipline_Definition?: Term_Discipline_DefinitionCreateNestedManyWithoutDefinitionInput
  }

  export type DefinitionUncheckedCreateWithoutSourceInput = {
    id?: string
    description?: string | null
    page: string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedCreateNestedManyWithoutDefinitionInput
  }

  export type DefinitionCreateOrConnectWithoutSourceInput = {
    where: DefinitionWhereUniqueInput
    create: XOR<DefinitionCreateWithoutSourceInput, DefinitionUncheckedCreateWithoutSourceInput>
  }

  export type Source_AuthorshipUpsertWithWhereUniqueWithoutSourceInput = {
    where: Source_AuthorshipWhereUniqueInput
    update: XOR<Source_AuthorshipUpdateWithoutSourceInput, Source_AuthorshipUncheckedUpdateWithoutSourceInput>
    create: XOR<Source_AuthorshipCreateWithoutSourceInput, Source_AuthorshipUncheckedCreateWithoutSourceInput>
  }

  export type Source_AuthorshipUpdateWithWhereUniqueWithoutSourceInput = {
    where: Source_AuthorshipWhereUniqueInput
    data: XOR<Source_AuthorshipUpdateWithoutSourceInput, Source_AuthorshipUncheckedUpdateWithoutSourceInput>
  }

  export type Source_AuthorshipUpdateManyWithWhereWithoutSourceInput = {
    where: Source_AuthorshipScalarWhereInput
    data: XOR<Source_AuthorshipUpdateManyMutationInput, Source_AuthorshipUncheckedUpdateManyWithoutSourceInput>
  }

  export type Source_AuthorshipScalarWhereInput = {
    AND?: Source_AuthorshipScalarWhereInput | Source_AuthorshipScalarWhereInput[]
    OR?: Source_AuthorshipScalarWhereInput[]
    NOT?: Source_AuthorshipScalarWhereInput | Source_AuthorshipScalarWhereInput[]
    Id?: StringFilter<"Source_Authorship"> | string
    sourceId?: StringFilter<"Source_Authorship"> | string
    authorId?: StringNullableFilter<"Source_Authorship"> | string | null
  }

  export type TranslationUpsertWithWhereUniqueWithoutSourceInput = {
    where: TranslationWhereUniqueInput
    update: XOR<TranslationUpdateWithoutSourceInput, TranslationUncheckedUpdateWithoutSourceInput>
    create: XOR<TranslationCreateWithoutSourceInput, TranslationUncheckedCreateWithoutSourceInput>
  }

  export type TranslationUpdateWithWhereUniqueWithoutSourceInput = {
    where: TranslationWhereUniqueInput
    data: XOR<TranslationUpdateWithoutSourceInput, TranslationUncheckedUpdateWithoutSourceInput>
  }

  export type TranslationUpdateManyWithWhereWithoutSourceInput = {
    where: TranslationScalarWhereInput
    data: XOR<TranslationUpdateManyMutationInput, TranslationUncheckedUpdateManyWithoutSourceInput>
  }

  export type DefinitionUpsertWithWhereUniqueWithoutSourceInput = {
    where: DefinitionWhereUniqueInput
    update: XOR<DefinitionUpdateWithoutSourceInput, DefinitionUncheckedUpdateWithoutSourceInput>
    create: XOR<DefinitionCreateWithoutSourceInput, DefinitionUncheckedCreateWithoutSourceInput>
  }

  export type DefinitionUpdateWithWhereUniqueWithoutSourceInput = {
    where: DefinitionWhereUniqueInput
    data: XOR<DefinitionUpdateWithoutSourceInput, DefinitionUncheckedUpdateWithoutSourceInput>
  }

  export type DefinitionUpdateManyWithWhereWithoutSourceInput = {
    where: DefinitionScalarWhereInput
    data: XOR<DefinitionUpdateManyMutationInput, DefinitionUncheckedUpdateManyWithoutSourceInput>
  }

  export type DefinitionScalarWhereInput = {
    AND?: DefinitionScalarWhereInput | DefinitionScalarWhereInput[]
    OR?: DefinitionScalarWhereInput[]
    NOT?: DefinitionScalarWhereInput | DefinitionScalarWhereInput[]
    id?: StringFilter<"Definition"> | string
    sourceId?: StringFilter<"Definition"> | string
    description?: StringNullableFilter<"Definition"> | string | null
    page?: StringFilter<"Definition"> | string
  }

  export type Source_AuthorshipCreateWithoutAuthorInput = {
    Id?: string
    source: SourceCreateNestedOneWithoutSource_AuthorshipInput
  }

  export type Source_AuthorshipUncheckedCreateWithoutAuthorInput = {
    Id?: string
    sourceId: string
  }

  export type Source_AuthorshipCreateOrConnectWithoutAuthorInput = {
    where: Source_AuthorshipWhereUniqueInput
    create: XOR<Source_AuthorshipCreateWithoutAuthorInput, Source_AuthorshipUncheckedCreateWithoutAuthorInput>
  }

  export type Source_AuthorshipUpsertWithWhereUniqueWithoutAuthorInput = {
    where: Source_AuthorshipWhereUniqueInput
    update: XOR<Source_AuthorshipUpdateWithoutAuthorInput, Source_AuthorshipUncheckedUpdateWithoutAuthorInput>
    create: XOR<Source_AuthorshipCreateWithoutAuthorInput, Source_AuthorshipUncheckedCreateWithoutAuthorInput>
  }

  export type Source_AuthorshipUpdateWithWhereUniqueWithoutAuthorInput = {
    where: Source_AuthorshipWhereUniqueInput
    data: XOR<Source_AuthorshipUpdateWithoutAuthorInput, Source_AuthorshipUncheckedUpdateWithoutAuthorInput>
  }

  export type Source_AuthorshipUpdateManyWithWhereWithoutAuthorInput = {
    where: Source_AuthorshipScalarWhereInput
    data: XOR<Source_AuthorshipUpdateManyMutationInput, Source_AuthorshipUncheckedUpdateManyWithoutAuthorInput>
  }

  export type DisciplineCreateWithoutTerm_Discipline_DefinitionInput = {
    id?: string
    name: string
    description?: string | null
    year?: string | null
    glossary: GlossaryCreateNestedOneWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateWithoutTerm_Discipline_DefinitionInput = {
    id?: string
    glossaryId: string
    name: string
    description?: string | null
    year?: string | null
  }

  export type DisciplineCreateOrConnectWithoutTerm_Discipline_DefinitionInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutTerm_Discipline_DefinitionInput, DisciplineUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
  }

  export type DefinitionCreateWithoutTerm_Discipline_DefinitionInput = {
    id?: string
    description?: string | null
    page: string
    source: SourceCreateNestedOneWithoutDefinitionInput
  }

  export type DefinitionUncheckedCreateWithoutTerm_Discipline_DefinitionInput = {
    id?: string
    sourceId: string
    description?: string | null
    page: string
  }

  export type DefinitionCreateOrConnectWithoutTerm_Discipline_DefinitionInput = {
    where: DefinitionWhereUniqueInput
    create: XOR<DefinitionCreateWithoutTerm_Discipline_DefinitionInput, DefinitionUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
  }

  export type TermCreateWithoutTerm_Discipline_DefinitionInput = {
    id?: string
    name: string
    Translation?: TranslationCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutTerm_Discipline_DefinitionInput = {
    id?: string
    name: string
    Translation?: TranslationUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutTerm_Discipline_DefinitionInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutTerm_Discipline_DefinitionInput, TermUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
  }

  export type DisciplineUpsertWithoutTerm_Discipline_DefinitionInput = {
    update: XOR<DisciplineUpdateWithoutTerm_Discipline_DefinitionInput, DisciplineUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
    create: XOR<DisciplineCreateWithoutTerm_Discipline_DefinitionInput, DisciplineUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    where?: DisciplineWhereInput
  }

  export type DisciplineUpdateToOneWithWhereWithoutTerm_Discipline_DefinitionInput = {
    where?: DisciplineWhereInput
    data: XOR<DisciplineUpdateWithoutTerm_Discipline_DefinitionInput, DisciplineUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
  }

  export type DisciplineUpdateWithoutTerm_Discipline_DefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    glossary?: GlossaryUpdateOneRequiredWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateWithoutTerm_Discipline_DefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    glossaryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DefinitionUpsertWithoutTerm_Discipline_DefinitionInput = {
    update: XOR<DefinitionUpdateWithoutTerm_Discipline_DefinitionInput, DefinitionUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
    create: XOR<DefinitionCreateWithoutTerm_Discipline_DefinitionInput, DefinitionUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    where?: DefinitionWhereInput
  }

  export type DefinitionUpdateToOneWithWhereWithoutTerm_Discipline_DefinitionInput = {
    where?: DefinitionWhereInput
    data: XOR<DefinitionUpdateWithoutTerm_Discipline_DefinitionInput, DefinitionUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
  }

  export type DefinitionUpdateWithoutTerm_Discipline_DefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
    source?: SourceUpdateOneRequiredWithoutDefinitionNestedInput
  }

  export type DefinitionUncheckedUpdateWithoutTerm_Discipline_DefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
  }

  export type TermUpsertWithoutTerm_Discipline_DefinitionInput = {
    update: XOR<TermUpdateWithoutTerm_Discipline_DefinitionInput, TermUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
    create: XOR<TermCreateWithoutTerm_Discipline_DefinitionInput, TermUncheckedCreateWithoutTerm_Discipline_DefinitionInput>
    where?: TermWhereInput
  }

  export type TermUpdateToOneWithWhereWithoutTerm_Discipline_DefinitionInput = {
    where?: TermWhereInput
    data: XOR<TermUpdateWithoutTerm_Discipline_DefinitionInput, TermUncheckedUpdateWithoutTerm_Discipline_DefinitionInput>
  }

  export type TermUpdateWithoutTerm_Discipline_DefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Translation?: TranslationUpdateManyWithoutTermNestedInput
  }

  export type TermUncheckedUpdateWithoutTerm_Discipline_DefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Translation?: TranslationUncheckedUpdateManyWithoutTermNestedInput
  }

  export type AuthorCreateWithoutSource_AuthorshipInput = {
    authorId?: string
    name?: string | null
  }

  export type AuthorUncheckedCreateWithoutSource_AuthorshipInput = {
    authorId?: string
    name?: string | null
  }

  export type AuthorCreateOrConnectWithoutSource_AuthorshipInput = {
    where: AuthorWhereUniqueInput
    create: XOR<AuthorCreateWithoutSource_AuthorshipInput, AuthorUncheckedCreateWithoutSource_AuthorshipInput>
  }

  export type SourceCreateWithoutSource_AuthorshipInput = {
    sourceId?: string
    title?: string | null
    publisher?: string | null
    year?: string | null
    type_publication?: string | null
    Translation?: TranslationCreateNestedManyWithoutSourceInput
    Definition?: DefinitionCreateNestedManyWithoutSourceInput
  }

  export type SourceUncheckedCreateWithoutSource_AuthorshipInput = {
    sourceId?: string
    title?: string | null
    publisher?: string | null
    year?: string | null
    type_publication?: string | null
    Translation?: TranslationUncheckedCreateNestedManyWithoutSourceInput
    Definition?: DefinitionUncheckedCreateNestedManyWithoutSourceInput
  }

  export type SourceCreateOrConnectWithoutSource_AuthorshipInput = {
    where: SourceWhereUniqueInput
    create: XOR<SourceCreateWithoutSource_AuthorshipInput, SourceUncheckedCreateWithoutSource_AuthorshipInput>
  }

  export type AuthorUpsertWithoutSource_AuthorshipInput = {
    update: XOR<AuthorUpdateWithoutSource_AuthorshipInput, AuthorUncheckedUpdateWithoutSource_AuthorshipInput>
    create: XOR<AuthorCreateWithoutSource_AuthorshipInput, AuthorUncheckedCreateWithoutSource_AuthorshipInput>
    where?: AuthorWhereInput
  }

  export type AuthorUpdateToOneWithWhereWithoutSource_AuthorshipInput = {
    where?: AuthorWhereInput
    data: XOR<AuthorUpdateWithoutSource_AuthorshipInput, AuthorUncheckedUpdateWithoutSource_AuthorshipInput>
  }

  export type AuthorUpdateWithoutSource_AuthorshipInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorUncheckedUpdateWithoutSource_AuthorshipInput = {
    authorId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SourceUpsertWithoutSource_AuthorshipInput = {
    update: XOR<SourceUpdateWithoutSource_AuthorshipInput, SourceUncheckedUpdateWithoutSource_AuthorshipInput>
    create: XOR<SourceCreateWithoutSource_AuthorshipInput, SourceUncheckedCreateWithoutSource_AuthorshipInput>
    where?: SourceWhereInput
  }

  export type SourceUpdateToOneWithWhereWithoutSource_AuthorshipInput = {
    where?: SourceWhereInput
    data: XOR<SourceUpdateWithoutSource_AuthorshipInput, SourceUncheckedUpdateWithoutSource_AuthorshipInput>
  }

  export type SourceUpdateWithoutSource_AuthorshipInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
    Translation?: TranslationUpdateManyWithoutSourceNestedInput
    Definition?: DefinitionUpdateManyWithoutSourceNestedInput
  }

  export type SourceUncheckedUpdateWithoutSource_AuthorshipInput = {
    sourceId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    publisher?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    type_publication?: NullableStringFieldUpdateOperationsInput | string | null
    Translation?: TranslationUncheckedUpdateManyWithoutSourceNestedInput
    Definition?: DefinitionUncheckedUpdateManyWithoutSourceNestedInput
  }

  export type GlossaryUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    Discipline?: DisciplineUpdateManyWithoutGlossaryNestedInput
  }

  export type GlossaryUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    Discipline?: DisciplineUncheckedUpdateManyWithoutGlossaryNestedInput
  }

  export type GlossaryUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisciplineUpdateWithoutGlossaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    Term_Discipline_Definition?: Term_Discipline_DefinitionUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateWithoutGlossaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateManyWithoutGlossaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Term_Discipline_DefinitionUpdateWithoutDisciplineInput = {
    Id?: StringFieldUpdateOperationsInput | string
    definition?: DefinitionUpdateOneWithoutTerm_Discipline_DefinitionNestedInput
    term?: TermUpdateOneRequiredWithoutTerm_Discipline_DefinitionNestedInput
  }

  export type Term_Discipline_DefinitionUncheckedUpdateWithoutDisciplineInput = {
    Id?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
    definitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Term_Discipline_DefinitionUncheckedUpdateManyWithoutDisciplineInput = {
    Id?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
    definitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Term_Discipline_DefinitionUpdateWithoutTermInput = {
    Id?: StringFieldUpdateOperationsInput | string
    discipline?: DisciplineUpdateOneRequiredWithoutTerm_Discipline_DefinitionNestedInput
    definition?: DefinitionUpdateOneWithoutTerm_Discipline_DefinitionNestedInput
  }

  export type Term_Discipline_DefinitionUncheckedUpdateWithoutTermInput = {
    Id?: StringFieldUpdateOperationsInput | string
    disciplineId?: StringFieldUpdateOperationsInput | string
    definitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Term_Discipline_DefinitionUncheckedUpdateManyWithoutTermInput = {
    Id?: StringFieldUpdateOperationsInput | string
    disciplineId?: StringFieldUpdateOperationsInput | string
    definitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TranslationUpdateWithoutTermInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
    source?: SourceUpdateOneRequiredWithoutTranslationNestedInput
  }

  export type TranslationUncheckedUpdateWithoutTermInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TranslationUncheckedUpdateManyWithoutTermInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Term_Discipline_DefinitionUpdateWithoutDefinitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    discipline?: DisciplineUpdateOneRequiredWithoutTerm_Discipline_DefinitionNestedInput
    term?: TermUpdateOneRequiredWithoutTerm_Discipline_DefinitionNestedInput
  }

  export type Term_Discipline_DefinitionUncheckedUpdateWithoutDefinitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    disciplineId?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
  }

  export type Term_Discipline_DefinitionUncheckedUpdateManyWithoutDefinitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    disciplineId?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
  }

  export type Source_AuthorshipUpdateWithoutSourceInput = {
    Id?: StringFieldUpdateOperationsInput | string
    author?: AuthorUpdateOneWithoutSource_AuthorshipNestedInput
  }

  export type Source_AuthorshipUncheckedUpdateWithoutSourceInput = {
    Id?: StringFieldUpdateOperationsInput | string
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Source_AuthorshipUncheckedUpdateManyWithoutSourceInput = {
    Id?: StringFieldUpdateOperationsInput | string
    authorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TranslationUpdateWithoutSourceInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
    term?: TermUpdateOneRequiredWithoutTranslationNestedInput
  }

  export type TranslationUncheckedUpdateWithoutSourceInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TranslationUncheckedUpdateManyWithoutSourceInput = {
    translationId?: StringFieldUpdateOperationsInput | string
    termId?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    translation?: NullableStringFieldUpdateOperationsInput | string | null
    page?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DefinitionUpdateWithoutSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUpdateManyWithoutDefinitionNestedInput
  }

  export type DefinitionUncheckedUpdateWithoutSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
    Term_Discipline_Definition?: Term_Discipline_DefinitionUncheckedUpdateManyWithoutDefinitionNestedInput
  }

  export type DefinitionUncheckedUpdateManyWithoutSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    page?: StringFieldUpdateOperationsInput | string
  }

  export type Source_AuthorshipUpdateWithoutAuthorInput = {
    Id?: StringFieldUpdateOperationsInput | string
    source?: SourceUpdateOneRequiredWithoutSource_AuthorshipNestedInput
  }

  export type Source_AuthorshipUncheckedUpdateWithoutAuthorInput = {
    Id?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
  }

  export type Source_AuthorshipUncheckedUpdateManyWithoutAuthorInput = {
    Id?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlossaryDefaultArgs instead
     */
    export type GlossaryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = GlossaryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisciplineDefaultArgs instead
     */
    export type DisciplineArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = DisciplineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TermDefaultArgs instead
     */
    export type TermArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TermDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DefinitionDefaultArgs instead
     */
    export type DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = DefinitionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TranslationDefaultArgs instead
     */
    export type TranslationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TranslationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SourceDefaultArgs instead
     */
    export type SourceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SourceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuthorDefaultArgs instead
     */
    export type AuthorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AuthorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Term_Discipline_DefinitionDefaultArgs instead
     */
    export type Term_Discipline_DefinitionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Term_Discipline_DefinitionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Source_AuthorshipDefaultArgs instead
     */
    export type Source_AuthorshipArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Source_AuthorshipDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}